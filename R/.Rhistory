column_title = x,
col = col_fun,
name = 'zScore',
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = 2:4, lwd = 2), axis_param = list(side = 'left', facing = 'outside'), ylim = c(0,8))),
left_annotation = rowAnnotation(textbox = anno_textbox(align_to = groups,
as.list(deg.count),
side = 'left',
background_gp = gpar(fill = NA, col = NA),
gp = gpar(col = 'black'),
padding = unit(0, 'mm')),
groups = anno_block(gp = gpar(fill = 2:4), show_name = F)),
use_raster = F)
}else{
EnrichedHeatmap(deg.mats[[x]],
axis_name = c(-1000, 0, 1000),
pos_line = F,
column_title = x,
col = col_fun,
show_heatmap_legend = F,
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = 2:4, lwd = 2), ylim = c(0,8), axis = F)),
use_raster = F)
}
})
deg.count
groups
unique(groups)
deg.count <- fairePeaks.deg %>%
data.frame() %>%
dplyr::group_by(faireCat.osaDeGrad) %>%
dplyr::tally() %>%
.$n
names(deg.count) <- c('Osa Dependent', 'Osa Ectopic', 'Osa Independent')
groups <- fairePeaks.deg$faireCat.osaDeGrad
lgd = Legend(at = c("Osa Dependent", "Osa Ectopic", "Osa Independent"), legend_gp = gpar(fill = 2:4))
deg.hms <- purrr::map(names(deg.mats), function(x) {
if(grepl('control.Rep1',x)){
EnrichedHeatmap(deg.mats[[x]],
axis_name = c(-1000, 0, 1000),
pos_line = F,
column_title = x,
col = col_fun,
name = 'zScore',
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = 2:4, lwd = 2), axis_param = list(side = 'left', facing = 'outside'), ylim = c(0,8))),
left_annotation = rowAnnotation(textbox = anno_textbox(align_to = groups,
as.list(deg.count),
side = 'left',
background_gp = gpar(fill = NA, col = NA),
gp = gpar(col = 'black'),
padding = unit(0, 'mm')),
groups = anno_block(gp = gpar(fill = 2:4), show_name = F)),
use_raster = F)
}else{
EnrichedHeatmap(deg.mats[[x]],
axis_name = c(-1000, 0, 1000),
pos_line = F,
column_title = x,
col = col_fun,
show_heatmap_legend = F,
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = 2:4, lwd = 2), ylim = c(0,8), axis = F)),
use_raster = F)
}
})
names(deg.hms) <- names(deg.mats)
hms <- deg.hms$control.Rep1 + deg.hms$control.Rep2 + deg.hms$nubG4.Rep1 + deg.hms$nubG4.Rep2
#png('rPlots/4B.png', width = 5, height = 5, units = 'in', res = 300)
ComplexHeatmap::draw(hms,annotation_legend_list = c(lgd), row_split = groups, merge_legend = T, heatmap_legend_side = 'bottom', )
#TODO - are heatmaps misleading? is this difficult to parse when split by these different peak call groups?
deg.mats <- purrr::map(deg.bws, ~{
normalizeToMatrix(., fairePeaks.deg, value_column = 'score', keep = c(0.11,0.99), extend = 1000 )
})
names(deg.mats) <- faire.ss %>%
dplyr::filter(experiment == 'osaGFP deGrad FAIRE') %>%
dplyr::mutate(nm = paste0(stringr::str_split_fixed(id,'_|\\.', n = 5)[,3],
'.',
stringr::str_split_fixed(id,'_|\\.', n = 5)[,5])) %>%
.$nm
common_min = min(unlist(deg.mats))
common_max = max(unlist(deg.mats))
col_fun = circlize::colorRamp2(seq(common_min, common_max, length.out = 6), viridis.hex)
deg.count <- fairePeaks.deg %>%
data.frame() %>%
dplyr::group_by(faireCat.osaDeGrad) %>%
dplyr::tally() %>%
.$n
names(deg.count) <- c('Osa Dependent', 'Osa Ectopic', 'Osa Independent')
groups <- fairePeaks.deg$faireCat.osaDeGrad
lgd = Legend(at = c("Osa Dependent", "Osa Ectopic", "Osa Independent"), legend_gp = gpar(fill = 2:4))
deg.hms <- purrr::map(names(deg.mats), function(x) {
if(grepl('control.Rep1',x)){
EnrichedHeatmap(deg.mats[[x]],
axis_name = c(-1000, 0, 1000),
pos_line = F,
column_title = x,
col = col_fun,
name = 'zScore',
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = 2:4, lwd = 2), axis_param = list(side = 'left', facing = 'outside'), ylim = c(0,8))),
left_annotation = rowAnnotation(textbox = anno_textbox(align_to = groups,
as.list(deg.count),
side = 'left',
background_gp = gpar(fill = NA, col = NA),
gp = gpar(col = 'black'),
padding = unit(0, 'mm')),
groups = anno_block(gp = gpar(fill = 2:4), show_name = F)),
use_raster = F)
}else{
EnrichedHeatmap(deg.mats[[x]],
axis_name = c(-1000, 0, 1000),
pos_line = F,
column_title = x,
col = col_fun,
show_heatmap_legend = F,
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = 2:4, lwd = 2), ylim = c(0,8), axis = F)),
use_raster = F)
}
})
names(deg.hms) <- names(deg.mats)
hms <- deg.hms$control.Rep1 + deg.hms$control.Rep2 + deg.hms$nubG4.Rep1 + deg.hms$nubG4.Rep2
#png('rPlots/4B.png', width = 5, height = 5, units = 'in', res = 300)
ComplexHeatmap::draw(hms,annotation_legend_list = c(lgd), row_split = groups, merge_legend = T, heatmap_legend_side = 'bottom', )
#dev.off()
fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(!yw.cnr) %>%
dplyr::group_by(fareCat.osaDeGrad, osa.cnr) %>%
dplyr::tally()
fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(!yw.cnr) %>%
dplyr::group_by(faireCat.osaDeGrad, osa.cnr) %>%
dplyr::tally()
fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(!yw.cnr) %>%
dplyr::group_by(faireCat.osaDeGrad, osa.cnr) %>%
dplyr::tally() %>%
dplyr::mutate(fraction = n / sum(n),
change = deg.peakCat)
fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(!yw.cnr) %>%
dplyr::group_by(faireCat.osaDeGrad, osa.cnr) %>%
dplyr::tally() %>%
dplyr::mutate(fraction = n / sum(n),
change = faireCat.osaDeGrad)
#TODO - are heatmaps misleading? is this difficult to parse when split by these different peak call groups?
deg.mats <- purrr::map(deg.bws, ~{
normalizeToMatrix(., fairePeaks.deg, value_column = 'score', keep = c(0.11,0.99), extend = 1000 )
})
names(deg.mats) <- faire.ss %>%
dplyr::filter(experiment == 'osaGFP deGrad FAIRE') %>%
dplyr::mutate(nm = paste0(stringr::str_split_fixed(id,'_|\\.', n = 5)[,3],
'.',
stringr::str_split_fixed(id,'_|\\.', n = 5)[,5])) %>%
.$nm
common_min = min(unlist(deg.mats))
common_max = max(unlist(deg.mats))
col_fun = circlize::colorRamp2(seq(common_min, common_max, length.out = 6), viridis.hex)
deg.count <- fairePeaks.deg %>%
data.frame() %>%
dplyr::group_by(faireCat.osaDeGrad) %>%
dplyr::tally() %>%
.$n
names(deg.count) <- c('Osa Dependent', 'Osa Ectopic', 'Osa Independent')
groups <- fairePeaks.deg$faireCat.osaDeGrad
lgd = Legend(at = c("Osa Dependent", "Osa Ectopic", "Osa Independent"), legend_gp = gpar(fill = 2:4))
deg.hms <- purrr::map(names(deg.mats), function(x) {
if(grepl('control.Rep1',x)){
EnrichedHeatmap(deg.mats[[x]],
axis_name = c(-1000, 0, 1000),
pos_line = F,
column_title = x,
col = col_fun,
name = 'zScore',
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = 2:4, lwd = 2), axis_param = list(side = 'left', facing = 'outside'), ylim = c(0,8))),
left_annotation = rowAnnotation(textbox = anno_textbox(align_to = groups,
as.list(deg.count),
side = 'left',
background_gp = gpar(fill = NA, col = NA),
gp = gpar(col = 'black'),
padding = unit(0, 'mm')),
groups = anno_block(gp = gpar(fill = 2:4), show_name = F)),
use_raster = F)
}else{
EnrichedHeatmap(deg.mats[[x]],
axis_name = c(-1000, 0, 1000),
pos_line = F,
column_title = x,
col = col_fun,
show_heatmap_legend = F,
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = 2:4, lwd = 2), ylim = c(0,8), axis = F)),
use_raster = F)
}
})
names(deg.hms) <- names(deg.mats)
hms <- deg.hms$control.Rep1 + deg.hms$control.Rep2 + deg.hms$nubG4.Rep1 + deg.hms$nubG4.Rep2
png('rPlots/4B.png', width = 5, height = 5, units = 'in', res = 300)
ComplexHeatmap::draw(hms,annotation_legend_list = c(lgd), row_split = groups, merge_legend = T, heatmap_legend_side = 'bottom', )
dev.off()
fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(!yw.cnr) %>%
dplyr::group_by(faireCat.osaDeGrad, osa.cnr) %>%
dplyr::tally() %>%
dplyr::mutate(fraction = n / sum(n),
change = faireCat.osaDeGrad) %>%
dplyr::mutate(per = paste0(round(100*fraction, digits = 1),'%')) %>%
plot.frac()
fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(!yw.cnr) %>%
dplyr::filter(faireCat.osaDeGrad == 'dependent')
fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(!yw.cnr) %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent')
fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(!yw.cnr) %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Ectopic')
fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(!yw.cnr) %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent' & osa.cnr)
fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(!yw.cnr) %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent')
#track.colors <- RColorBrewer::brewer.pal(n = 4, "PiYG")
track.colors <- c("grey70","grey60","grey40", 'grey30')
deg.ss.browser <- faire.osaDeGrad.ssPool %>%
dplyr::bind_rows(., faire.wt.ssPool[faire.wt.ssPool$grp == 'wt.3LW' & faire.wt.ssPool$grp == 'wt.24h',]) %>%
dplyr::mutate(color = track.colors)
#track.colors <- RColorBrewer::brewer.pal(n = 4, "PiYG")
track.colors <- c("grey70","grey60","grey40", 'grey30')
deg.ss.browser <- faire.osaDeGrad.ssPool %>%
dplyr::bind_rows(., faire.wt.ssPool[faire.wt.ssPool$grp == 'wt.3LW' | faire.wt.ssPool$grp == 'wt.24h',]) %>%
dplyr::mutate(color = track.colors)
deg.tracks <- get_cnr_tracks(deg.ss.browser, ylim = c(0,15))
deg.tracks <- c(deg.tracks$wt_3LW, deg.tracks$osaGFP.deGrad_control_faire, deg.tracks$osaGFP.deGrad_nubG4_faire)
brdisc.at <- Gviz::AnnotationTrack(range = brD, genome = 'dm6', name = 'brDisc', fill = 'grey', col = 'transparent', background.title = 'white', showTitle = F )
axis <- Gviz::GenomeAxisTrack(scale = 1000)
png('rPlots/4D.png', width = 4, height = 4, res = 300, units = 'in')
Gviz::plotTracks(c(axis, deg.tracks, brdisc.at), chromosome = seqnames(brD) %>% as.character(),
from = start(brD + 1000),
to = end(brD + 1000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
dev.off()
deg.ss.browser
#track.colors <- RColorBrewer::brewer.pal(n = 4, "PiYG")
track.colors <- c("grey70","grey60","grey40", 'grey30')
deg.ss.browser <- faire.osaDeGrad.ssPool %>%
dplyr::bind_rows(., faire.wt.ssPool[faire.wt.ssPool$grp == 'wt.3LW' | faire.wt.ssPool$grp == 'wt.24h',]) %>%
dplyr::mutate(color = track.colors)
deg.tracks <- get_cnr_tracks(deg.ss.browser, ylim = c(0,15))
deg.tracks <- c(deg.tracks$wt_3LW, deg.tracks$wt_24h, deg.tracks$osaGFP.deGrad_control_faire, deg.tracks$osaGFP.deGrad_nubG4_faire)
brdisc.at <- Gviz::AnnotationTrack(range = brD, genome = 'dm6', name = 'brDisc', fill = 'grey', col = 'transparent', background.title = 'white', showTitle = F )
axis <- Gviz::GenomeAxisTrack(scale = 1000)
png('rPlots/4D.png', width = 4, height = 4, res = 300, units = 'in')
Gviz::plotTracks(c(axis, deg.tracks, brdisc.at), chromosome = seqnames(brD) %>% as.character(),
from = start(brD + 1000),
to = end(brD + 1000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
dev.off()
#track.colors <- RColorBrewer::brewer.pal(n = 4, "PiYG")
track.colors <- c("grey70","grey60","grey50", "grey40", 'grey30')
deg.ss.browser <- faire.osaDeGrad.ssPool %>%
dplyr::bind_rows(., faire.wt.ssPool[faire.wt.ssPool$grp == 'wt.3LW' | faire.wt.ssPool$grp == 'wt.24h' | faire.wt.ssPool$grp == 'wt.44h',]) %>%
dplyr::mutate(color = track.colors)
deg.tracks <- get_cnr_tracks(deg.ss.browser, ylim = c(0,15))
deg.tracks <- c(deg.tracks$wt_3LW, deg.tracks$wt_24h, deg.tracks$wt_44h, deg.tracks$osaGFP.deGrad_control_faire, deg.tracks$osaGFP.deGrad_nubG4_faire)
brdisc.at <- Gviz::AnnotationTrack(range = brD, genome = 'dm6', name = 'brDisc', fill = 'grey', col = 'transparent', background.title = 'white', showTitle = F )
axis <- Gviz::GenomeAxisTrack(scale = 1000)
png('rPlots/4D.png', width = 4, height = 5, res = 300, units = 'in')
Gviz::plotTracks(c(axis, deg.tracks, brdisc.at), chromosome = seqnames(brD) %>% as.character(),
from = start(brD + 1000),
to = end(brD + 1000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
dev.off()
#track.colors <- RColorBrewer::brewer.pal(n = 4, "PiYG")
track.colors <- c("grey70","grey60","grey50", "grey40", 'grey30')
deg.ss.browser <- faire.osaDeGrad.ssPool %>%
dplyr::bind_rows(., faire.wt.ssPool[faire.wt.ssPool$grp == 'wt.3LW' | faire.wt.ssPool$grp == 'wt.24h' | faire.wt.ssPool$grp == 'wt.44h',]) %>%
dplyr::mutate(color = track.colors)
deg.tracks <- get_cnr_tracks(deg.ss.browser, ylim = c(0,15))
deg.tracks <- c(deg.tracks$wt_3LW,
deg.tracks$wt_24h,
deg.tracks$wt_44h,
deg.tracks$osaGFP.deGrad_control_faire,
deg.tracks$osaGFP.deGrad_nubG4_faire)
brdisc.at <- Gviz::AnnotationTrack(range = brD, genome = 'dm6', name = 'brDisc', fill = 'grey', col = 'transparent', background.title = 'white', showTitle = F )
axis <- Gviz::GenomeAxisTrack(scale = 1000)
png('rPlots/4D.png', width = 4, height = 6, res = 300, units = 'in')
Gviz::plotTracks(c(axis, deg.tracks, brdisc.at), chromosome = seqnames(brD) %>% as.character(),
from = start(brD + 1000),
to = end(brD + 1000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
dev.off()
fairePeaks.deg %>% dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent')
fairePeaks.deg %>% dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent')
fairePeaks.deg %>% data.frame() %>% dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent')
osa.dependent
fairePeaks.osaDependent = fairePeaks.deg %>% data.frame() %>% dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent')
fairePeaks.osaDependent$geneId
dependent.go <- select(org.Dm.eg.db,
keys = fairePeaks.osaDependent$geneId,
columns = c('SYMBOL','GO','ENTREZID'),
keytype = "FLYBASE")
dependent.go
fairePeaks.osaDependent = fairePeaks.deg %>% data.frame() %>% dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent')
dependent.go <- select(org.Dm.eg.db,
keys = fairePeaks.osaDependent$geneId,
columns = c('SYMBOL','GO','ENTREZID'),
keytype = "FLYBASE")
dependent.terms <- select(GO.db,
keys = dependent.go$GO,
columns = c('DEFINITION', 'GOID', 'ONTOLOGY', 'TERM'))
dependent <- dplyr::bind_cols(dependent.go, dependent.terms)
dependent
fairePeaks.osaDependent = fairePeaks.deg %>% data.frame() %>% dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent')
dependent.go <- select(org.Dm.eg.db,
keys = fairePeaks.osaDependent$geneId,
columns = c('SYMBOL','GO','ENTREZID'),
keytype = "FLYBASE")
dependent.terms <- select(GO.db,
keys = dependent.go$GO,
columns = c('DEFINITION', 'GOID', 'ONTOLOGY', 'TERM'))
dependent <- dplyr::bind_cols(dependent.go, dependent.terms)
#library(GOSemSim)
dmGO <- GOSemSim::godata('org.Dm.eg.db', ont = 'MF')
dependent.entrez <- dependent %>% dplyr::filter(ONTOLOGY == 'BP') %>% .$ENTREZID
dependent
dependent.go
dependent.go
dependent
dependent.terms <- select(GO.db,
keys = dependent.go$GO,
columns = c('DEFINITION', 'GOID',  'TERM'))
dependent <- dplyr::bind_cols(dependent.go, dependent.terms)
dependent
fairePeaks.osaDependent = fairePeaks.deg %>% data.frame() %>% dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent')
dependent.go <- select(org.Dm.eg.db,
keys = fairePeaks.osaDependent$geneId,
columns = c('SYMBOL','GO','ENTREZID'),
keytype = "FLYBASE")
dependent.terms <- select(GO.db,
keys = dependent.go$GO,
columns = c('DEFINITION', 'GOID',  'TERM'))
dependent <- dplyr::bind_cols(dependent.go, dependent.terms)
#library(GOSemSim)
dmGO <- GOSemSim::godata('org.Dm.eg.db', ont = 'MF')
dependent.entrez <- dependent %>% dplyr::filter(ONTOLOGY == 'BP') %>% .$ENTREZID
#ggo.dependent <- clusterProfiler::groupGO(gene = dependent.entrez,
#                         OrgDb = org.Dm.eg.db,
#                         ont = 'BP',
#                         level = 6,
#                         readable = T)
ggo.dependent <- clusterProfiler::enrichGO(gene = dependent.entrez,
OrgDb = org.Dm.eg.db,
ont = 'BP',
readable = T)
BiocManager::install("clusterProfiler")
fairePeaks.osaDependent = fairePeaks.deg %>% data.frame() %>% dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent')
dependent.go <- select(org.Dm.eg.db,
keys = fairePeaks.osaDependent$geneId,
columns = c('SYMBOL','GO','ENTREZID'),
keytype = "FLYBASE")
dependent.terms <- select(GO.db,
keys = dependent.go$GO,
columns = c('DEFINITION', 'GOID',  'TERM'))
dependent <- dplyr::bind_cols(dependent.go, dependent.terms)
#library(GOSemSim)
dmGO <- GOSemSim::godata('org.Dm.eg.db', ont = 'MF')
dependent.entrez <- dependent %>% dplyr::filter(ONTOLOGY == 'BP') %>% .$ENTREZID
#ggo.dependent <- clusterProfiler::groupGO(gene = dependent.entrez,
#                         OrgDb = org.Dm.eg.db,
#                         ont = 'BP',
#                         level = 6,
#                         readable = T)
ggo.dependent <- clusterProfiler::enrichGO(gene = dependent.entrez,
OrgDb = org.Dm.eg.db,
ont = 'BP',
readable = T)
clusterProfiler::goplot(ggo.dependent)
ggo.dependent
ggo.dependent@result
ggo.dependent@keytype
ggo.dependent@ontology
ggo.dependent@gene
ggo.dependent@readable
ggo.dependent@dr
clusterProfiler::goplot(ggo.dependent)
ggo.dependent@gene2Symbol
ggo.dependent@termsim
ggo.dependent@geneSets
ggo.dependent@ontology
ggo.dependent@result
fairePeaks.osaDependent = fairePeaks.deg %>% data.frame() %>% dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent')
dependent.go <- select(org.Dm.eg.db,
keys = fairePeaks.osaDependent$geneId,
columns = c('SYMBOL','GO','ENTREZID'),
keytype = "FLYBASE")
dependent.terms <- select(GO.db,
keys = dependent.go$GO,
columns = c('DEFINITION', 'GOID','ONTOLOGY', 'TERM'))
dependent <- dplyr::bind_cols(dependent.go, dependent.terms)
#library(GOSemSim)
#dmGO <- GOSemSim::godata('org.Dm.eg.db', ont = 'MF')
dependent.entrez <- dependent %>% dplyr::filter(ONTOLOGY == 'BP') %>% .$ENTREZID
dependent.entrez <- dependent %>% dplyr::filter(ONTOLOGY..5 == 'BP') %>% .$ENTREZID
dependent.entrez <- dependent %>% dplyr::filter(ONTOLOGY...5 == 'BP') %>% .$ENTREZID
fairePeaks.osaDependent = fairePeaks.deg %>% data.frame() %>% dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent')
dependent.go <- select(org.Dm.eg.db,
keys = fairePeaks.osaDependent$geneId,
columns = c('SYMBOL','GO','ENTREZID'),
keytype = "FLYBASE")
dependent.terms <- select(GO.db,
keys = dependent.go$GO,
columns = c('DEFINITION', 'GOID','ONTOLOGY', 'TERM'))
dependent <- dplyr::bind_cols(dependent.go, dependent.terms)
#library(GOSemSim)
#dmGO <- GOSemSim::godata('org.Dm.eg.db', ont = 'MF')
dependent.entrez <- dependent %>% dplyr::filter(ONTOLOGY...5 == 'BP') %>% .$ENTREZID
#ggo.dependent <- clusterProfiler::groupGO(gene = dependent.entrez,
#                         OrgDb = org.Dm.eg.db,
#                         ont = 'BP',
#                         level = 6,
#                         readable = T)
ggo.dependent <- clusterProfiler::enrichGO(gene = dependent.entrez,
OrgDb = org.Dm.eg.db,
ont = 'BP',
readable = T)
ggo.dependent@result
clusterProfiler::goplot(ggo.dependent)
clusterProfiler::goplot(ggo.dependent)
ggo.dependent <- clusterProfiler::enrichGO(gene = dependent.entrez,
OrgDb = org.Dm.eg.db,
ont = 'BP',
readable = T)
clusterProfiler::goplot(ggo.dependent)
devtools::install_github("guangchuangyu/DOSE")
install.packages('devtools')
devtools::install_github("guangchuangyu/DOSE")
fairePeaks.osaDependent = fairePeaks.deg %>% data.frame() %>% dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent')
dependent.go <- select(org.Dm.eg.db,
keys = fairePeaks.osaDependent$geneId,
columns = c('SYMBOL','GO','ENTREZID'),
keytype = "FLYBASE")
dependent.terms <- select(GO.db,
keys = dependent.go$GO,
columns = c('DEFINITION', 'GOID','ONTOLOGY', 'TERM'))
dependent <- dplyr::bind_cols(dependent.go, dependent.terms)
#library(GOSemSim)
#dmGO <- GOSemSim::godata('org.Dm.eg.db', ont = 'MF')
dependent.entrez <- dependent %>% dplyr::filter(ONTOLOGY...5 == 'BP') %>% .$ENTREZID
#ggo.dependent <- clusterProfiler::groupGO(gene = dependent.entrez,
#                         OrgDb = org.Dm.eg.db,
#                         ont = 'BP',
#                         level = 6,
#                         readable = T)
ggo.dependent <- clusterProfiler::enrichGO(gene = dependent.entrez,
OrgDb = org.Dm.eg.db,
ont = 'BP',
readable = T)
clusterProfiler::goplot(ggo.dependent)
BiocManager::install("clusterProfiler")
BiocManager::install("clusterProfiler", force = TRUE)
fairePeaks.osaDependent = fairePeaks.deg %>% data.frame() %>% dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent')
dependent.go <- select(org.Dm.eg.db,
keys = fairePeaks.osaDependent$geneId,
columns = c('SYMBOL','GO','ENTREZID'),
keytype = "FLYBASE")
dependent.terms <- select(GO.db,
keys = dependent.go$GO,
columns = c('DEFINITION', 'GOID','ONTOLOGY', 'TERM'))
dependent <- dplyr::bind_cols(dependent.go, dependent.terms)
#library(GOSemSim)
#dmGO <- GOSemSim::godata('org.Dm.eg.db', ont = 'MF')
dependent.entrez <- dependent %>% dplyr::filter(ONTOLOGY...5 == 'BP') %>% .$ENTREZID
#ggo.dependent <- clusterProfiler::groupGO(gene = dependent.entrez,
#                         OrgDb = org.Dm.eg.db,
#                         ont = 'BP',
#                         level = 6,
#                         readable = T)
ggo.dependent <- clusterProfiler::enrichGO(gene = dependent.entrez,
OrgDb = org.Dm.eg.db,
ont = 'BP',
readable = T)
clusterProfiler::goplot(ggo.dependent)
BiocManager::install("clusterProfiler", force = TRUE)
install.packages('RcppArmadillo')
install.packages('RcppArmadillo')
install.packages('RcppArmadillo')
