# E(spl)-c
#chr3R:25,980,255-26,065,374
espl <- data.frame('seqnames' = 'chr3R',
'start' = 25980255,
'end' = 26065374) %>%
GRanges()
# ac/sc
#chrX:365,344-402,061
acsc <- data.frame('seqnames' = 'chrX',
'start' = 365344,
'end' = 402061) %>%
GRanges()
# serrate
#chr3R:27,167,731-27,227,610
ser <- data.frame('seqnames' = 'chr3R',
'start' = 27167731,
'end' = 27227610) %>%
GRanges()
# notch
#chrX:3,093,887-3,206,341
notch <- data.frame('seqnames' = 'chrX',
'start' = 3093887,
'end' = 3206341) %>%
GRanges()
###
# nubbin
#chr2L:12,542,935-12,696,192
nub <- data.frame('seqnames' = 'chr2L',
'start' = 12542935,
'end' = 12696192) %>%
GRanges()
# enhancers
###
redFly_enhancers <- read.table('bed/all_Dmel_CRM-sorted-merged.bed', sep = '\t')
colnames(redFly_enhancers) <- c('seqnames', 'start','end')
redFly_enhancers.ranges <- GRanges(redFly_enhancers)
## memes setup
###
# meme db
###
#TODO - so clunky...
# loading in the fly factor database, drop out a couple of problematic fbgn
# then use the fbgn.validated lookup table for fly factor to update all the old ids to correct ids
# then filter on the on gene list -- which has to go through a similar process of id validation
# gross
meme_db <- universalmotif::read_meme('Data/fly_factor_survey.meme') %>%
universalmotif::to_df() %>%
dplyr::group_by(name) %>%
dplyr::filter(!grepl('FBgn0051782|FBgn0265182', name)) %>%  #drop this FBgn, problematic update to multiple new FBgns of pseudogenes
dplyr::mutate(basename = stringr::str_split_fixed(name, '_', n = 2)[[1]],
fbgn.validated = fbgn.validated[fbgn.validated$FlyFactor == basename,]$Validated)
meme_db_on <- meme_db %>%
dplyr::filter(fbgn.validated %in% ON.genes.validated$Validated)
options(meme_db = universalmotif::to_list(meme_db_on, extrainfo = F))
## colors
viridis.hex <- c("#440154","#3b528b","#21918c","#5ec962","#5ec962","#fde725")
cbPalette <- c( "#0072B2","#E69F00","black","#56B4E9","#009E73", "#999999","#D55E00", "#CC79A7")
cbPalette.4 <- c("#D81B60","#1E88E5","#FFC107","#004D40")
cbPalette.ibm <- c('#332288','#117733','#44AA99','#88CCEE','#DDCC77','#CC6677','#AA4499','#882255')
## browser
WTFAIRE.colors <- c("grey10","grey20","grey30","grey40","grey50","grey60")
## peak subsets
osaPeaks <- peaks$cnr.df %>%
dplyr::filter(osa.cnr & !yw.cnr) %>%
GRanges() %>%
resize(width = 1, fix = "center")
osaPeaks.full <- peaks$cnr.df %>%
dplyr::filter(osa.cnr & !yw.cnr) %>%
GRanges(seqlengths = seqlengths(dm6))
osaPeaks.enhancers.full <- osaPeaks.full %>%
data.frame() %>%
dplyr::filter(anno.new %in% c('Distal Intergenic', 'Intron')) %>%
GRanges()
# uses rep1 summit coordinates
osaPeaks.summits <- subsetByOverlaps(cnr.summits, osaPeaks.full)
osaPeaks.faire.summits <- subsetByOverlaps(faire.wt.3LW.summits, osaPeaks.full)
fairePeaks.wt <- peaks$faire.wt.df %>%
#  dplyr::filter(assay == 'faire' & experiment == 'WT FAIRE Wing Timecourse') %>%
GRanges() %>%
resize(width = 1, fix = "center")
#redundant... but used in a couple chunks for motif analysis
fairePeaks.wt.full <- peaks$faire.wt.df %>%
dplyr::filter(assay == 'faire'  & experiment == 'WT FAIRE Wing Timecourse')
#DONE - remove the peakCat ? since now using log2fold change for these categories...
# switched to using osaDeg.qF which is a peak set derived from diffbind, that has been subset using iranges by intersect
# with quality filtered peak calls in peaks$faire.osaDeg.df
osaDeg.center <- osaDeg.qF %>%
GRanges() %>%
resize(width = 1, fix = "center")
# rotund peaks
rn.peaks <- peaks$rn.df %>%
GRanges()
rn.distal <- rn.peaks %>%
dplyr::filter(anno.new %in% c('Distal Intergenic', 'Intron')) %>%
GRanges()
# genomic 500bp
dm6.500bp <- peaks$dm6.500bp %>%
GRanges() %>%
resize(width = 1, fix = 'center')
#fairePeaks.osaDependent <- fairePeaks.deg %>%
#  data.frame() %>%
#  dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent') %>%
#  GRanges()
#
#fairePeaks.osaIndependent <- fairePeaks.deg %>%
#  data.frame() %>%
#  dplyr::filter(faireCat.osaDeGrad == 'Osa Independent') %>%
#  GRanges()
#
#fairePeaks.osaEctopic <- fairePeaks.deg %>%
#  data.frame() %>%
#  dplyr::filter(faireCat.osaDeGrad == 'Osa Ectopic') %>%
#  GRanges()
## load bws
#TODO - cleanup - move matrices?
bws <- get_bws(dplyr::bind_rows(cnr.ss, faire.wt.ssPool), 'id')
deg.bws <- get_bws(faire.ss %>% dplyr::filter(experiment == 'osaGFP deGrad FAIRE'), 'id')
deg.bws %<>% purrr::map(., function(x){
x[!(seqnames(x) %in% c('chrM','chrY','chr4'))] # filter out unwanted chr from each granges in the list
})
#TODO move data to main project directory and fix path
#TODO merge reps?
#k27ac.bw <- rtracklayer::import.bw('~/mckay/h3k27ac_cnr/bigwig/yw-3LW-wing-ak27ac-pel-Rep1_dm6_trim_q5_dupsRemoved_allFrags_rpgcNorm_zNorm.bw')
#TODO put these notes in better place"
## K27ac data- yeast spikein norm pel data is generally lower in rep2 than rep1, this is not seen in znorm or drosYak norm data
## drosYak norm signal is "low" as in the absolute values are usually < 1, but the normalization between samples looks good, and the signal to noise still looks fine, not appreciably better or worse that znorm
## using pellet because only have 2 reps of pel, only 1 of sup - the sup rep looks really good though I think
## using large fragments only because all fractions/reps show poor signal in <120 bp frag split
#k27ac.bw <- rtracklayer::import.bw('~/mckay/H3K27ac_CnR/BigWig/yw-3LW-wing-ak27ac-pel-MEAN_dm6_trim_q5_dupsRemoved_150to700_rpgcNorm_zNorm.bw')
k27ac.1.bw <- rtracklayer::import.bw('BigWig/yw-3LW-wing-ak27ac-pel-Rep1_dm6_trim_q5_dupsRemoved_150to700_rpgcNorm_zNorm.bw')
k27ac.2.bw <- rtracklayer::import.bw('BigWig/yw-3LW-wing-ak27ac-pel-Rep2_dm6_trim_q5_dupsRemoved_150to700_rpgcNorm_zNorm.bw')
## functions
plot.frac <- function(x) {
lapply(unique(x$change), function(i) {
x %>%
dplyr::filter(change == i) %>%
ggplot(aes(fraction, change, fill = Osa.Bound)) +
geom_bar(stat = 'identity', width = 1) +
geom_text(aes(label = per), position = position_fill(vjust = 0.6),  size = 7, fontface = "bold") +
#geom_text(aes(label = per, position = position_stack(vjust = 0.5))) +
scale_fill_manual(values = c('grey80','#41f0ad'), name = 'Osa Bound') +
scale_y_discrete(position = 'right', ) +
xlab('Percent Bound by Osa') +
theme(legend.position = 'top',
legend.key.size = unit(1, 'cm'),
legend.text = element_text(size = 15),
legend.title = element_text(size = 20),
panel.background = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
#           axis.text.y = element_text(size = 12),
panel.grid = element_blank()) +
NULL
fn = paste0('rPlots/3E_',i,'.png')
ggsave(fn, width = 6, height = 1.5, units = 'in', dpi = 300 )
})
}
## .bed out
osaPeaks %>%
data.frame() %>%
dplyr::select(seqnames, start, end) %>%
write.table('osaPeaks.bed', quote = F, col.names = F, row.names = F, sep = '\t')
osaPeaks.full %>%
data.frame() %>%
dplyr::select(seqnames, start, end) %>%
write.table('osaPeaks-full.bed', quote = F, col.names = F, row.names = F, sep = '\t')
peaks$cnr.df %>%
data.frame() %>%
dplyr::filter(yw.cnr) %>%
dplyr::select(seqnames, start, end) %>%
write.table('controlPeaks.bed', quote = F, col.names = F, row.names = F, sep = '\t')
#fairePeaks.osaDependent %>%
#  data.frame() %>%
#  dplyr::select(seqnames, start, end) %>%
#  write.table('osaDependent.bed', quote = F, col.names = F, row.names = F, sep = '\t')
#
#fairePeaks.osaEctopic %>%
#  data.frame() %>%
#  dplyr::select(seqnames, start, end) %>%
#  write.table('osaEctopic.bed', quote = F, col.names = F, row.names = F, sep = '\t')
#
## gviz
track.colors <- c("grey40","#D01C8B", "grey40","#D01C8B")
cnr.ss.browser <- cnr.ss %>% dplyr::mutate(color = track.colors)
mckay_enhancers <- read.table('bed/cloned_enhancers_dm6.bed', sep = '\t')
colnames(mckay_enhancers) <- c('seqnames', 'start','end','name')
mckay_enhancers %<>% GRanges()
mckay_enhancertrack <- Gviz::AnnotationTrack(range = mckay_enhancers,
genome = 'dm6',
fill = 'black',
col = 'transparent',
background.title = 'white',
showTitle = F)
Delta_enhancers <- read.table('bed/cloned_Delta_enhancers.bed', sep = '\t')
espl_enhancers <- read.table('bed/espl_enhancers-merge.bed', sep = '\t')
enhancers <- dplyr::bind_rows(Delta_enhancers, espl_enhancers)
colnames(enhancers) <- c('seqnames', 'start','end','name')
enhancer.ranges <- GRanges(enhancers)
enhancertrack <- Gviz::AnnotationTrack(range = enhancer.ranges,
genome = 'dm6',
fill = '#18c708',
col = 'transparent',
background.title = 'white',
showTitle = F)
dlpouch.track <- Gviz::AnnotationTrack(range = dlpouch,
genome = 'dm6',
fill = '#18c708',
col = 'transparent',
background.title = 'white',
showTitle = F)
genetrack <- Gviz::GeneRegionTrack(range = dm6.TxDb, fill = 'grey80', showTitle = F, background.title = 'white', stacking = 'squish')
peakTrack <- Gviz::AnnotationTrack(range = osaPeaks.full,
genome = 'dm6',
fill = '#D01C8B',
col = 'transparent',
background.title = 'white',
showTitle = F )
#TODO - is osa.dependent annotation correct? using diffbind?
osaDep.peakTrack <- Gviz::AnnotationTrack(range = GRanges(peaks$faire.osaDeg.df %>% dplyr::filter(osa.dependent)),
#osaDep.peakTrack <- Gviz::AnnotationTrack(range = osaDeg.osaDep,
genome = 'dm6',
fill = '#469ae8',
col = 'transparent',
background.title = 'white',
showTitle = F)
hairless_peaks <- read.table('bed/hairless-dm6.bed', col.names = c('seqnames', 'start', 'end')) %>% GRanges()
hTrack <- Gviz::AnnotationTrack(range = hairless_peaks,
genome = 'dm6',
fill = '#2ad4c3',
col = 'transparent',
background.title = 'white',
showTitle = F)
spacer <- Gviz::AnnotationTrack(background.title = 'white')
## matrices for heatmaps
mats <- purrr::map(bws, ~{
normalizeToMatrix(., osaPeaks, value_column = 'score', keep = c(0.01, 0.99), extend = 2000)
})
names(mats) <- names(bws)
ACF <- c('Acf', 'Chrac-16')
SWISNF <- c('osa', 'Bap111', 'brm','polybromo','Snr1','Act5C','mor')
INO80 <- c('Arp5','Ino80','pho')
ATAC <- c('Atac2','Atac3','D12','NC2beta')
NURF <- c('Caf1-55','Nurf-38','E(bx)','ISWI')
NURD <- c('Mi-2','MTA1-like')
Domino <- c('dom','Nipped-A','pont','Tip60')
SNF_2like <- c('kis','okr','Etl1','Chd1','lexA') # including cotrol lexA here because it get's manually colored in the figure later
complexlist <- c('ACF','Swi/Snf','INO80','ATAC','NURF','NURD','Domino','SNF2-like','control')
colorlist <- RColorBrewer::brewer.pal(length(complexlist), 'Set1')
color_lookup <- data.frame(complex = complexlist, hex = c('black',cbPalette))
replicate_sheet <- read.csv('Data/rnaiScreen_replicate_wings.csv') %>%
dplyr::mutate(replicate = paste(symbol, line, date, drop, sep = '_'))
rnaiScreen_filtered <- rnaiScreen %>%
dplyr::mutate(replicate = paste(symbol, line, date, scene, sep = '_')) %>%
dplyr::filter(!replicate %in% replicate_sheet$replicate | sampleID == 'osa_31266_210503') %>% # filter out replicate images, or 31266_210503 -- images of 3LW
dplyr:: mutate(complex = dplyr::case_when(symbol %in% ACF ~ 'ACF',
symbol %in% INO80 ~ 'INO80',
symbol %in% ATAC ~ 'ATAC',
symbol %in% NURF ~ 'NURF',
symbol %in% NURD ~ 'NURD',
symbol %in% Domino ~ 'Domino',
symbol %in% SWISNF ~ 'Swi/Snf',
symbol %in% SNF_2like ~ 'SNF2-like')) %>%
dplyr::inner_join(., color_lookup) %>%
dplyr::mutate(id = glue::glue("<i style='color:{hex};font-size:10pt'>{id}</i>"))
rnaiScreen_filtered
tables1 <- rnaiScreen_filtered %>%
dplyr::mutate(symbol = stringr::str_to_title(symbol)) %>%
dplyr::group_by(symbol, line) %>%
dplyr::summarise(m = mean(KDtoWT),
sd = sd(KDtoWT),
n = dplyr::n())
write.csv('rPlots/TableS1-data.csv', x = tables1)
rnaiScreen_filtered %>%
ggplot(aes(KDtoWT, forcats::fct_reorder(id, KDtoWT) )) +
geom_vline(xintercept = 1, color = "grey50") +
geom_boxplot(aes(fill = bap_hits), outlier.size = 0.5) +
# scale_fill_manual(values = c("#66C2A6",'#F059A2','white')) +
scale_fill_manual(values = c("#0072B2",'#F059A2','white')) +
scale_x_continuous(trans = "log2") + # trying out a log transformation rather than using the log2 FC data
xlab("brD KD/WT (log2 trans)") +
theme(#axis.text.y = element_text(size = 10),
axis.text.y = element_markdown(),
axis.title.y = element_blank(),
panel.background = element_rect(fill = 'white', colour = 'grey10'),
panel.grid.major  = element_line(color = 'grey90'),
legend.title = element_blank(),
legend.position = 'bottom',
plot.background = element_rect(fill='transparent'))
ggsave('rPlots/2D.png', width = 5, height = 8)
ACF.CHRAC <- c('Acf', 'Chrac-16','ISWI')
SWISNF <- c('osa', 'Bap111', 'brm','polybromo','Snr1','Act5C','mor')
INO80 <- c('Arp5','Ino80','pho')
ATAC <- c('Atac2','Atac3','D12','NC2beta') #lacks ATPase activity but associated with sliding
NURF <- c('Caf1-55','Nurf-38','E(bx)','ISWI')
NURD <- c('Mi-2','MTA1-like')
Domino <- c('dom','Nipped-A','pont','Tip60')
SNF_2like <- c('kis','okr','Etl1','Chd1','lexA') # including cotrol lexA here because it get's manually colored in the figure later
complexlist <- c('ACF','Swi/Snf','INO80','ATAC','NURF','NURD','Domino','SNF2-like','control')
colorlist <- RColorBrewer::brewer.pal(length(complexlist), 'Set1')
color_lookup <- data.frame(complex = complexlist, hex = c('black',cbPalette))
replicate_sheet <- read.csv('Data/rnaiScreen_replicate_wings.csv') %>%
dplyr::mutate(replicate = paste(symbol, line, date, drop, sep = '_'))
rnaiScreen_filtered <- rnaiScreen %>%
dplyr::mutate(replicate = paste(symbol, line, date, scene, sep = '_')) %>%
dplyr::filter(!replicate %in% replicate_sheet$replicate | sampleID == 'osa_31266_210503') %>% # filter out replicate images, or 31266_210503 -- images of 3LW
dplyr:: mutate(complex = dplyr::case_when(symbol %in% ACF ~ 'ACF',
symbol %in% INO80 ~ 'INO80',
symbol %in% ATAC ~ 'ATAC',
symbol %in% NURF ~ 'NURF',
symbol %in% NURD ~ 'NURD',
symbol %in% Domino ~ 'Domino',
symbol %in% SWISNF ~ 'Swi/Snf',
symbol %in% SNF_2like ~ 'SNF2-like')) %>%
dplyr::inner_join(., color_lookup) %>%
dplyr::mutate(id = glue::glue("<i style='color:{hex};font-size:10pt'>{id}</i>"))
rnaiScreen_filtered
tables1 <- rnaiScreen_filtered %>%
dplyr::mutate(symbol = stringr::str_to_title(symbol)) %>%
dplyr::group_by(symbol, line) %>%
dplyr::summarise(m = mean(KDtoWT),
sd = sd(KDtoWT),
n = dplyr::n())
write.csv('rPlots/TableS1-data.csv', x = tables1)
rnaiScreen_filtered %>%
ggplot(aes(KDtoWT, forcats::fct_reorder(id, KDtoWT) )) +
geom_vline(xintercept = 1, color = "grey50") +
geom_boxplot(aes(fill = bap_hits), outlier.size = 0.5) +
# scale_fill_manual(values = c("#66C2A6",'#F059A2','white')) +
scale_fill_manual(values = c("#0072B2",'#F059A2','white')) +
scale_x_continuous(trans = "log2") + # trying out a log transformation rather than using the log2 FC data
xlab("brD KD/WT (log2 trans)") +
theme(#axis.text.y = element_text(size = 10),
#axis.text.y = element_markdown(),
axis.title.y = element_blank(),
panel.background = element_rect(fill = 'white', colour = 'grey10'),
panel.grid.major  = element_line(color = 'grey90'),
legend.title = element_blank(),
legend.position = 'bottom',
plot.background = element_rect(fill='transparent'))
ggsave('rPlots/2D.png', width = 5, height = 8)
ACF.CHRAC <- c('Acf', 'Chrac-16','ISWI')
SWISNF <- c('osa', 'Bap111', 'brm','polybromo','Snr1','Act5C','mor')
INO80 <- c('Arp5','Ino80','pho')
ATAC <- c('Atac2','Atac3','D12','NC2beta') #lacks ATPase activity but associated with sliding
NURF <- c('Caf1-55','Nurf-38','E(bx)','ISWI')
NURD <- c('Mi-2','MTA1-like')
Domino <- c('dom','Nipped-A','pont','Tip60')
SNF_2like <- c('kis','okr','Etl1','Chd1','lexA') # including cotrol lexA here because it get's manually colored in the figure later
complexlist <- c('ACF','Swi/Snf','INO80','ATAC','NURF','NURD','Domino','SNF2-like','control')
colorlist <- RColorBrewer::brewer.pal(length(complexlist), 'Set1')
color_lookup <- data.frame(complex = complexlist, hex = c('black',cbPalette))
replicate_sheet <- read.csv('Data/rnaiScreen_replicate_wings.csv') %>%
dplyr::mutate(replicate = paste(symbol, line, date, drop, sep = '_'))
rnaiScreen_filtered <- rnaiScreen %>%
dplyr::mutate(replicate = paste(symbol, line, date, scene, sep = '_')) %>%
dplyr::filter(!replicate %in% replicate_sheet$replicate | sampleID == 'osa_31266_210503') %>% # filter out replicate images, or 31266_210503 -- images of 3LW
dplyr:: mutate(complex = dplyr::case_when(symbol %in% ACF ~ 'ACF',
symbol %in% INO80 ~ 'INO80',
symbol %in% ATAC ~ 'ATAC',
symbol %in% NURF ~ 'NURF',
symbol %in% NURD ~ 'NURD',
symbol %in% Domino ~ 'Domino',
symbol %in% SWISNF ~ 'Swi/Snf',
symbol %in% SNF_2like ~ 'SNF2-like')) %>%
dplyr::inner_join(., color_lookup)# %>%
# dplyr::mutate(id = glue::glue("<i style='color:{hex};font-size:10pt'>{id}</i>"))
rnaiScreen_filtered
tables1 <- rnaiScreen_filtered %>%
dplyr::mutate(symbol = stringr::str_to_title(symbol)) %>%
dplyr::group_by(symbol, line) %>%
dplyr::summarise(m = mean(KDtoWT),
sd = sd(KDtoWT),
n = dplyr::n())
write.csv('rPlots/TableS1-data.csv', x = tables1)
rnaiScreen_filtered %>%
ggplot(aes(KDtoWT, forcats::fct_reorder(id, KDtoWT) )) +
geom_vline(xintercept = 1, color = "grey50") +
geom_boxplot(aes(fill = bap_hits), outlier.size = 0.5) +
# scale_fill_manual(values = c("#66C2A6",'#F059A2','white')) +
scale_fill_manual(values = c("#0072B2",'#F059A2','white')) +
scale_x_continuous(trans = "log2") + # trying out a log transformation rather than using the log2 FC data
xlab("brD KD/WT (log2 trans)") +
theme(#axis.text.y = element_text(size = 10),
#axis.text.y = element_markdown(),
axis.title.y = element_blank(),
panel.background = element_rect(fill = 'white', colour = 'grey10'),
panel.grid.major  = element_line(color = 'grey90'),
legend.title = element_blank(),
legend.position = 'bottom',
plot.background = element_rect(fill='transparent'))
ggsave('rPlots/2D.png', width = 5, height = 8)
ACF.CHRAC <- c('Acf', 'Chrac-16','ISWI')
SWISNF <- c('osa', 'Bap111', 'brm','polybromo','Snr1','Act5C','mor')
INO80 <- c('Arp5','Ino80','pho')
ATAC <- c('Atac2','Atac3','D12','NC2beta') #lacks ATPase activity but associated with sliding
NURF <- c('Caf1-55','Nurf-38','E(bx)','ISWI')
NURD <- c('Mi-2','MTA1-like')
Domino <- c('dom','Nipped-A','pont','Tip60')
SNF_2like <- c('kis','okr','Etl1','Chd1','lexA') # including cotrol lexA here because it get's manually colored in the figure later
complexlist <- c('ACF','Swi/Snf','INO80','ATAC','NURF','NURD','Domino','SNF2-like','control')
colorlist <- RColorBrewer::brewer.pal(length(complexlist), 'Set1')
color_lookup <- data.frame(complex = complexlist, hex = c('black',cbPalette))
replicate_sheet <- read.csv('Data/rnaiScreen_replicate_wings.csv') %>%
dplyr::mutate(replicate = paste(symbol, line, date, drop, sep = '_'))
rnaiScreen_filtered <- rnaiScreen %>%
dplyr::mutate(replicate = paste(symbol, line, date, scene, sep = '_')) %>%
dplyr::filter(!replicate %in% replicate_sheet$replicate | sampleID == 'osa_31266_210503') %>% # filter out replicate images, or 31266_210503 -- images of 3LW
dplyr:: mutate(complex = dplyr::case_when(symbol %in% ACF ~ 'ACF',
symbol %in% INO80 ~ 'INO80',
symbol %in% ATAC ~ 'ATAC',
symbol %in% NURF ~ 'NURF',
symbol %in% NURD ~ 'NURD',
symbol %in% Domino ~ 'Domino',
symbol %in% SWISNF ~ 'Swi/Snf',
symbol %in% SNF_2like ~ 'SNF2-like')) %>%
dplyr::inner_join(., color_lookup)# %>%
# dplyr::mutate(id = glue::glue("<i style='color:{hex};font-size:10pt'>{id}</i>"))
rnaiScreen_filtered
tables1 <- rnaiScreen_filtered %>%
dplyr::mutate(symbol = stringr::str_to_title(symbol)) %>%
dplyr::group_by(symbol, line) %>%
dplyr::summarise(m = mean(KDtoWT),
sd = sd(KDtoWT),
n = dplyr::n())
write.csv('rPlots/TableS1-data.csv', x = tables1)
rnaiScreen_filtered %>%
ggplot(aes(KDtoWT, forcats::fct_reorder(id, KDtoWT) )) +
geom_vline(xintercept = 1, color = "grey50") +
geom_boxplot(aes(fill = bap_hits), outlier.size = 0.5) +
# scale_fill_manual(values = c("#66C2A6",'#F059A2','white')) +
scale_fill_manual(values = c("#99BADD",'#F059A2','white')) +
scale_x_continuous(trans = "log2") + # trying out a log transformation rather than using the log2 FC data
xlab("brD KD/WT (log2 trans)") +
theme(#axis.text.y = element_text(size = 10),
#axis.text.y = element_markdown(),
axis.title.y = element_blank(),
panel.background = element_rect(fill = 'white', colour = 'grey10'),
panel.grid.major  = element_line(color = 'grey90'),
legend.title = element_blank(),
legend.position = 'bottom',
plot.background = element_rect(fill='transparent'))
ggsave('rPlots/2D.png', width = 5, height = 8)
ACF.CHRAC <- c('Acf', 'Chrac-16','ISWI')
SWISNF <- c('osa', 'Bap111', 'brm','polybromo','Snr1','Act5C','mor')
INO80 <- c('Arp5','Ino80','pho')
ATAC <- c('Atac2','Atac3','D12','NC2beta') #lacks ATPase activity but associated with sliding
NURF <- c('Caf1-55','Nurf-38','E(bx)','ISWI')
NURD <- c('Mi-2','MTA1-like')
Domino <- c('dom','Nipped-A','pont','Tip60')
SNF_2like <- c('kis','okr','Etl1','Chd1','lexA') # including cotrol lexA here because it get's manually colored in the figure later
complexlist <- c('ACF','Swi/Snf','INO80','ATAC','NURF','NURD','Domino','SNF2-like','control')
colorlist <- RColorBrewer::brewer.pal(length(complexlist), 'Set1')
color_lookup <- data.frame(complex = complexlist, hex = c('black',cbPalette))
replicate_sheet <- read.csv('Data/rnaiScreen_replicate_wings.csv') %>%
dplyr::mutate(replicate = paste(symbol, line, date, drop, sep = '_'))
rnaiScreen_filtered <- rnaiScreen %>%
dplyr::mutate(replicate = paste(symbol, line, date, scene, sep = '_')) %>%
dplyr::filter(!replicate %in% replicate_sheet$replicate | sampleID == 'osa_31266_210503') %>% # filter out replicate images, or 31266_210503 -- images of 3LW
dplyr:: mutate(complex = dplyr::case_when(symbol %in% ACF ~ 'ACF',
symbol %in% INO80 ~ 'INO80',
symbol %in% ATAC ~ 'ATAC',
symbol %in% NURF ~ 'NURF',
symbol %in% NURD ~ 'NURD',
symbol %in% Domino ~ 'Domino',
symbol %in% SWISNF ~ 'Swi/Snf',
symbol %in% SNF_2like ~ 'SNF2-like')) %>%
dplyr::inner_join(., color_lookup)# %>%
# dplyr::mutate(id = glue::glue("<i style='color:{hex};font-size:10pt'>{id}</i>"))
rnaiScreen_filtered
tables1 <- rnaiScreen_filtered %>%
dplyr::mutate(symbol = stringr::str_to_title(symbol)) %>%
dplyr::group_by(symbol, line) %>%
dplyr::summarise(m = mean(KDtoWT),
sd = sd(KDtoWT),
n = dplyr::n())
write.csv('rPlots/TableS1-data.csv', x = tables1)
rnaiScreen_filtered %>%
ggplot(aes(KDtoWT, forcats::fct_reorder(id, KDtoWT) )) +
geom_vline(xintercept = 1, color = "grey50") +
geom_boxplot(aes(fill = bap_hits), outlier.size = 0.5) +
# scale_fill_manual(values = c("#66C2A6",'#F059A2','white')) +
scale_fill_manual(values = c("87C2FF",'#F059A2','white')) +
scale_x_continuous(trans = "log2") + # trying out a log transformation rather than using the log2 FC data
xlab("brD KD/WT (log2 trans)") +
theme(#axis.text.y = element_text(size = 10),
#axis.text.y = element_markdown(),
axis.title.y = element_blank(),
panel.background = element_rect(fill = 'white', colour = 'grey10'),
panel.grid.major  = element_line(color = 'grey90'),
legend.title = element_blank(),
legend.position = 'bottom',
plot.background = element_rect(fill='transparent'))
ggsave('rPlots/2D.png', width = 5, height = 8)
ggsave('rPlots/2D.png', width = 5, height = 8)
rnaiScreen_filtered %>%
ggplot(aes(KDtoWT, forcats::fct_reorder(id, KDtoWT) )) +
geom_vline(xintercept = 1, color = "grey50") +
geom_boxplot(aes(fill = bap_hits), outlier.size = 0.5) +
# scale_fill_manual(values = c("#66C2A6",'#F059A2','white')) +
scale_fill_manual(values = c("#87C2FF",'#F059A2','white')) +
scale_x_continuous(trans = "log2") + # trying out a log transformation rather than using the log2 FC data
xlab("brD KD/WT (log2 trans)") +
theme(#axis.text.y = element_text(size = 10),
#axis.text.y = element_markdown(),
axis.title.y = element_blank(),
panel.background = element_rect(fill = 'white', colour = 'grey10'),
panel.grid.major  = element_line(color = 'grey90'),
legend.title = element_blank(),
legend.position = 'bottom',
plot.background = element_rect(fill='transparent'))
ggsave('rPlots/2D.png', width = 5, height = 8)
