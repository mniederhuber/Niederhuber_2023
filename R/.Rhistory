plot.margin = margin(0,0,0,0, "cm"),
legend.position = 'bottom')
## format the tom.results for the rna heatmap
rna.df <- format_rna(tom.df)
## plot the rna heatmap for current consensus
rna.hm <- rna.df %>%
ggplot(aes(rna_grp,1, fill = log_mean)) +
geom_tile() +
scale_fill_gradient(low = '#e9edf5', high = 'Red', limit = c(0,3)) +
facet_grid(rows = vars(forcats::fct_rev(match_altname))) +
theme(legend.position = "bottom",
axis.text.y = element_blank(),
plot.background = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
strip.background = element_blank(),
strip.text.y = element_blank(),
legend.key.size = unit(0.4, 'in'),
plot.margin = margin(0,0,0,0, "cm"))
plot <- tom.hm + plot_spacer() + rna.hm + plot_layout(widths = c(4, -0.5 ,4.5))
fp <- paste0('rPlots/',unique(x$consensus),'_tomtom.png')
ggsave(fp,plot = plot, width = 5, height = 5, dpi = 300, unit = 'in')
})
purrr::map(tom.results, function(x) {
## subset the tomtom results to the <= 10 most significant matches
tom.df <- x %>%
dplyr::group_by(neg_log_eval) %>%
dplyr::arrange(neg_log_eval, .by_group = T)
## plot the hm of tomtom results for current consensus
tom.hm <- tom.df %>%
ggplot(aes(consensus, match_altname, fill = neg_log_eval)) +
geom_tile() +
scale_fill_continuous(type = 'viridis', name = '-log_eval', limit = c(-1.2,0)) +
scale_y_discrete(expand = c(0,0)) +
theme(panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank(),
axis.title = element_blank(),
#axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
legend.key.size = unit(0.4, 'in'),
plot.margin = margin(0,0,0,0, "cm"),
legend.position = 'bottom')
## format the tom.results for the rna heatmap
rna.df <- format_rna(tom.df)
## plot the rna heatmap for current consensus
rna.hm <- rna.df %>%
ggplot(aes(rna_grp,1, fill = log_mean)) +
geom_tile() +
scale_fill_gradient(low = '#e9edf5', high = 'Red', limit = c(0,3)) +
facet_grid(rows = vars(forcats::fct_rev(match_altname))) +
theme(legend.position = "bottom",
axis.text.y = element_blank(),
plot.background = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
strip.background = element_blank(),
strip.text.y = element_blank(),
legend.key.size = unit(0.4, 'in'),
plot.margin = margin(0,0,0,0, "cm"))
plot <- tom.hm + plot_spacer() + rna.hm + plot_layout(widths = c(4, -0.5 ,4.5))
fp <- paste0('rPlots/',unique(x$consensus),'_tomtom.png')
ggsave(fp,plot = plot, width = 5, height = 5, dpi = 300, unit = 'in')
})
osaDep.seq = fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.3LW_24h == 'closing' & faireCat.osaDeGrad == 'Osa Ectopic') %>%
GRanges() %>%
resize(1000, "center") %>%
memes::get_sequence(dm6)
osaIndep.seq = fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.3LW_24h == 'closing' & faireCat.osaDeGrad == 'Osa Independent') %>%
GRanges() %>%
resize(1000, "center") %>%
memes::get_sequence(dm6)
osaDep.streme <- memes::runStreme(osaDep.seq, control = osaIndep.seq)
osaDep.tomtom <- memes::runTomTom(osaDep.streme, database = '/Users/m/McKay/Motif_databases/FLY/fly_factor_survey.meme') %>%
data.frame()
#####
tom.results <- tomResults(osaDep.tomtom)
purrr::map(tom.results, function(x) {
## subset the tomtom results to the <= 10 most significant matches
tom.df <- x %>%
dplyr::group_by(neg_log_eval) %>%
dplyr::arrange(neg_log_eval, .by_group = T)
## plot the hm of tomtom results for current consensus
tom.hm <- tom.df %>%
ggplot(aes(consensus, match_altname, fill = neg_log_eval)) +
geom_tile() +
scale_fill_continuous(type = 'viridis', name = '-log_eval', limit = c(-1.2,0)) +
scale_y_discrete(expand = c(0,0)) +
theme(panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank(),
axis.title = element_blank(),
#axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
legend.key.size = unit(0.4, 'in'),
plot.margin = margin(0,0,0,0, "cm"),
legend.position = 'bottom')
## format the tom.results for the rna heatmap
rna.df <- format_rna(tom.df)
## plot the rna heatmap for current consensus
rna.hm <- rna.df %>%
ggplot(aes(rna_grp,1, fill = log_mean)) +
geom_tile() +
scale_fill_gradient(low = '#e9edf5', high = 'Red', limit = c(0,3)) +
facet_grid(rows = vars(forcats::fct_rev(match_altname))) +
theme(legend.position = "bottom",
axis.text.y = element_blank(),
plot.background = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
strip.background = element_blank(),
strip.text.y = element_blank(),
legend.key.size = unit(0.4, 'in'),
plot.margin = margin(0,0,0,0, "cm"))
plot <- tom.hm + plot_spacer() + rna.hm + plot_layout(widths = c(4, -0.5 ,4.5))
fp <- paste0('rPlots/temp-',unique(x$consensus),'_tomtom.png')
ggsave(fp,plot = plot, width = 5, height = 5, dpi = 300, unit = 'in')
})
fairePeaks.osaDependent %>%
dplyr::arrange(faire_3LW_24h.log2FoldChange)
fairePeaks.osaDependent %>%
dplyr::arrange(faire_osaDeGrad.log2FoldChange)
fairePeaks.osaDependent %>%
dplyr::arrange(faire_osaDeGrad.log2FoldChange, desc = T)
fairePeaks.osaDependent %>%
dplyr::arrange(faire_osaDeGrad.log2FoldChange, desc())
fairePeaks.osaDependent %>%
dplyr::arrange(desc(faire_osaDeGrad.log2FoldChange))
fairePeaks.osaDependent <- fairePeaks.deg %>% data.frame() %>% dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent')
fairePeaks.osaDependent %>%
dplyr::arrange(desc(faire_osaDeGrad.log2FoldChange))
library(magrittr)
library(ggplot2)
library(ggrepel)
library(GenomicRanges)
library(org.Dm.eg.db)
library(AnnotationDbi)
library(EnrichedHeatmap)
library(ComplexHeatmap)
library(GO.db)
source('utils.R')
###
# load rData
###
load('rData/sheets.rda')
load('rData/peaks.rda')
###
# assign global variables
###
dm6 <- BSgenome.Dmelanogaster.UCSC.dm6::BSgenome.Dmelanogaster.UCSC.dm6
dm6.TxDb <- TxDb.Dmelanogaster.UCSC.dm6.ensGene::TxDb.Dmelanogaster.UCSC.dm6.ensGene
brD <- data.frame('seqnames' = 'chrX',
'start' = 1565708,
'end' = 1567401) %>%
GenomicRanges::GRanges()
###
# colors
###
viridis.hex <- c("#440154","#3b528b","#21918c","#5ec962","#5ec962","#fde725")
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
###
# peak subsets
###
osaPeaks <- peaks %>%
dplyr::filter(osa.cnr & !yw.cnr & assay == 'cnr') %>%
dplyr::mutate(deg.peakCat = dplyr::case_when(osaGFP.deGrad & !osaGFP.control ~ 'osa ectopic',
!osaGFP.deGrad & osaGFP.control ~ 'osa dependent',
osaGFP.deGrad & osaGFP.control ~ 'osa independent',
T ~ as.character(NA))) %>%  # NA here would be peaks that aren't reproducible or of good quality
GRanges() %>%
resize(width = 1, fix = "center")
fairePeaks.wt <- peaks %>%
dplyr::filter(assay == 'faire' & experiment == 'WT FAIRE Wing Timecourse') %>%
GRanges() %>%
resize(width = 1, fix = "center")
#DONE - remove the peakCat ? since now using log2fold change for these categories...
fairePeaks.deg <- peaks %>%
dplyr::filter(assay == 'faire' & experiment == 'osaGFP deGrad Pupal Wing FAIRE') %>%
#  dplyr::mutate(deg.peakCat = dplyr::case_when(osaGFP.deGrad & !osaGFP.control ~ 'osa ectopic',
#                                               !osaGFP.deGrad & osaGFP.control ~ 'osa dependent',
#                                               osaGFP.deGrad & osaGFP.control ~ 'osa independent',
#                                               T ~ as.character(NA))) %>%  # NA here would be peaks that aren't reproducible or of good quality
#  dplyr::filter(!is.na(deg.peakCat)) %>%
GRanges() %>%
resize(width = 1, fix = "center")
fairePeaks.osaDependent <- fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent')
fairePeaks.osaIndependent <- fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Independent')
fairePeaks.osaEctopic <- fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Ectopic')
###
# load bws and matrices for heatmaps
###
#TODO - cleanup - move matrices?
bws <- get_bws(dplyr::bind_rows(cnr.ss, faire.wt.ssPool), 'id')
deg.bws <- get_bws(faire.ss %>% dplyr::filter(experiment == 'osaGFP deGrad FAIRE'), 'id')
mats <- purrr::map(bws, ~{
normalizeToMatrix(., osaPeaks, value_column = 'score', keep = c(0.01, 0.99), extend = 2000)
})
names(mats) <- names(bws)
#TODO -- move to utils?
###
# functions
###
plot.frac <- function(x) {
lapply(unique(x$change), function(i) {
x %>%
dplyr::filter(change == i) %>%
ggplot(aes(fraction, change, fill = osa.cnr)) +
geom_bar(stat = 'identity', width = 1) +
geom_text(aes(label = per), position = position_fill(vjust = 0.6),  size = 7, fontface = "bold") +
#geom_text(aes(label = per, position = position_stack(vjust = 0.5))) +
scale_fill_manual(values = c('grey80','#41f0ad'), name = 'Osa Bound') +
scale_y_discrete(position = 'right', ) +
xlab('Percent Bound by Osa') +
theme(legend.position = 'top',
legend.key.size = unit(1, 'cm'),
legend.text = element_text(size = 15),
legend.title = element_text(size = 20),
panel.background = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
#           axis.text.y = element_text(size = 12),
panel.grid = element_blank()) +
NULL
fn = paste0('rPlots/3E_',i,'.png')
ggsave(fn, width = 6, height = 1.5, units = 'in', dpi = 300 )
})
}
fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(!yw.cnr)  #use osa specific peaks... is this right? YES.
fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(!yw.cnr) %>% #use osa specific peaks... is this right? YES.
dplyr::group_by(faireCat.osaDeGrad, osa.cnr) %>%
dplyr::tally()
#DONE - remove the peakCat ? since now using log2fold change for these categories...
fairePeaks.deg <- peaks %>%
dplyr::filter(assay == 'faire' & experiment == 'osaGFP deGrad Pupal Wing FAIRE') %>%
#  dplyr::mutate(deg.peakCat = dplyr::case_when(osaGFP.deGrad & !osaGFP.control ~ 'osa ectopic',
#                                               !osaGFP.deGrad & osaGFP.control ~ 'osa dependent',
#                                               osaGFP.deGrad & osaGFP.control ~ 'osa independent',
#                                               T ~ as.character(NA))) %>%  # NA here would be peaks that aren't reproducible or of good quality
dplyr::filter(osaGFP.deGrad | osaGFP.control) %>% # want to only use peaks that are reproducible and of good quality
GRanges() %>%
resize(width = 1, fix = "center")
fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(!yw.cnr) %>% #use osa specific peaks... is this right? YES.
dplyr::group_by(faireCat.osaDeGrad, osa.cnr) %>%
dplyr::tally()
fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(!yw.cnr) %>% #use osa specific peaks... is this right? YES.
dplyr::group_by(faireCat.osaDeGrad, osa.cnr) %>%
dplyr::tally() %>%
dplyr::mutate(fraction = n / sum(n),
change = faireCat.osaDeGrad) %>%
dplyr::mutate(per = paste0(round(100*fraction, digits = 1),'%')) %>%
plot.frac()
#TODO - are heatmaps misleading? is this difficult to parse when split by these different peak call groups?
# union osa degrad peaks
deg.mats <- purrr::map(deg.bws, ~{
normalizeToMatrix(., fairePeaks.deg, value_column = 'score', keep = c(0.11,0.99), extend = 1000 )
})
names(deg.mats) <- faire.ss %>%
dplyr::filter(experiment == 'osaGFP deGrad FAIRE') %>%
dplyr::mutate(nm = paste0(stringr::str_split_fixed(id,'_|\\.', n = 5)[,3],
'.',
stringr::str_split_fixed(id,'_|\\.', n = 5)[,5])) %>%
.$nm
common_min = min(unlist(deg.mats))
common_max = max(unlist(deg.mats))
col_fun = circlize::colorRamp2(seq(common_min, common_max, length.out = 6), viridis.hex)
deg.count <- fairePeaks.deg %>%
data.frame() %>%
dplyr::group_by(faireCat.osaDeGrad) %>% #peak category assigned in peaks.R
dplyr::tally() %>%
.$n
names(deg.count) <- c('Osa Dependent', 'Osa Ectopic', 'Osa Independent')
groups <- fairePeaks.deg$faireCat.osaDeGrad
lgd = Legend(at = c("Osa Dependent", "Osa Ectopic", "Osa Independent"), legend_gp = gpar(fill = 2:4))
deg.hms <- purrr::map(names(deg.mats), function(x) {
if(grepl('control.Rep1',x)){
EnrichedHeatmap(deg.mats[[x]],
axis_name = c(-1000, 0, 1000),
pos_line = F,
column_title = x,
col = col_fun,
name = 'zScore',
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = 2:4, lwd = 2), axis_param = list(side = 'left', facing = 'outside'), ylim = c(0,8))),
left_annotation = rowAnnotation(textbox = anno_textbox(align_to = groups,
as.list(deg.count),
side = 'left',
background_gp = gpar(fill = NA, col = NA),
gp = gpar(col = 'black'),
padding = unit(0, 'mm')),
groups = anno_block(gp = gpar(fill = 2:4), show_name = F)),
use_raster = F)
}else{
EnrichedHeatmap(deg.mats[[x]],
axis_name = c(-1000, 0, 1000),
pos_line = F,
column_title = x,
col = col_fun,
show_heatmap_legend = F,
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = 2:4, lwd = 2), ylim = c(0,8), axis = F)),
use_raster = F)
}
})
names(deg.hms) <- names(deg.mats)
hms <- deg.hms$control.Rep1 + deg.hms$control.Rep2 + deg.hms$nubG4.Rep1 + deg.hms$nubG4.Rep2
png('rPlots/4B.png', width = 5, height = 5, units = 'in', res = 300)
ComplexHeatmap::draw(hms,annotation_legend_list = c(lgd), row_split = groups, merge_legend = T, heatmap_legend_side = 'bottom', )
dev.off()
fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(!yw.cnr) %>% #use osa specific peaks... is this right? YES.
dplyr::group_by(faireCat.osaDeGrad, osa.cnr) %>%
dplyr::tally() %>%
dplyr::mutate(fraction = n / sum(n),
change = faireCat.osaDeGrad) %>%
dplyr::mutate(per = paste0(round(100*fraction, digits = 1),'%')) %>%
plot.frac()
unique(fairePeaks.deg$cnr.peakCat)
fairePeaks.deg %>%
data.frame() %>%
dplyr::mutate(osa.cnr.specific = ifelse(osa.cnr & !yw.cnr,T,F)) %>%
dplyr::group_by(faireCat.osaDeGrad, osa.cnr) %>%
dplyr::tally() %>%
dplyr::mutate(fraction = n / sum(n),
change = faireCat.osaDeGrad) %>%
dplyr::mutate(per = paste0(round(100*fraction, digits = 1),'%')) %>%
plot.frac()
fairePeaks.deg %>%
data.frame() %>%
dplyr::mutate(osa.cnr.specific = ifelse(osa.cnr & !yw.cnr,T,F)) %>%
dplyr::group_by(faireCat.osaDeGrad, osa.cnr) %>%
dplyr::tally()
fairePeaks.osaDependent <- fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent') %>%
GRanges()
fairePeaks.osaIndependent <- fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Independent') %>%
GRanges()
fairePeaks.osaEctopic <- fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Ectopic') %>%
GRanges()
dependent.go <- select(org.Dm.eg.db,
keys = fairePeaks.osaDependent$geneId,
columns = c('SYMBOL','GO','ENTREZID'),
keytype = "FLYBASE")
#fairePeaks.osaDependent <- fairePeaks.deg %>% data.frame() %>% dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent')
dependent.go <- select(org.Dm.eg.db,
keys = fairePeaks.osaDependent$geneId,
columns = c('SYMBOL','GO','ENTREZID'),
keytype = "FLYBASE")
dependent.terms <- select(GO.db,
keys = dependent.go$GO,
columns = c('DEFINITION', 'GOID', 'TERM'))
dependent <- dplyr::bind_cols(dependent.go, dependent.terms)
#library(GOSemSim)
#dmGO <- GOSemSim::godata('org.Dm.eg.db', ont = 'MF')
dependent.entrez <- dependent %>% .$ENTREZID
ggo.dependent <- clusterProfiler::enrichGO(gene = dependent.entrez,
OrgDb = org.Dm.eg.db,
ont = 'all',
readable = T)
png('rPlots/4F.png', width = 10, height = 8, res = 300, units = 'in')
enrichplot::dotplot(ggo.dependent, split = 'ONTOLOGY', font.size = 12, label_format = 80) + facet_grid(ONTOLOGY~., scale = 'free')
dev.off()
png('rPlots/4sup.png', width = 10, height = 8, res = 300, units = 'in')
enrichplot::dotplot(ggo.dependent, split = 'ONTOLOGY', font.size = 12, label_format = 80) + facet_grid(ONTOLOGY~., scale = 'free')
dev.off()
faire.count <- fairePeaks.osaDependent %>%
data.frame() %>%
dplyr::group_by(faireCat.3LW_24h) %>%
dplyr::talley()
faire.count <- fairePeaks.osaDependent %>%
data.frame() %>%
dplyr::group_by(faireCat.3LW_24h) %>%
dplyr::tally()
faire.count
fairePeaks.osaDependent %>%
data.frame() %>%
dplyr::filter(!anno.new == "3' UTR") %>%
dplyr::group_by(faireCat.3LW_24h, anno.new) %>%
dplyr::tally()
library(magrittr)
library(ggplot2)
library(ggrepel)
library(GenomicRanges)
library(org.Dm.eg.db)
library(AnnotationDbi)
library(EnrichedHeatmap)
library(ComplexHeatmap)
library(GO.db)
library(patchwork)
source('utils.R')
###
# load rData
###
load('rData/sheets.rda')
load('rData/peaks.rda')
###
# assign global variables
###
dm6 <- BSgenome.Dmelanogaster.UCSC.dm6::BSgenome.Dmelanogaster.UCSC.dm6
dm6.TxDb <- TxDb.Dmelanogaster.UCSC.dm6.ensGene::TxDb.Dmelanogaster.UCSC.dm6.ensGene
brD <- data.frame('seqnames' = 'chrX',
'start' = 1565708,
'end' = 1567401) %>%
GenomicRanges::GRanges()
###
# colors
###
viridis.hex <- c("#440154","#3b528b","#21918c","#5ec962","#5ec962","#fde725")
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
###
# peak subsets
###
osaPeaks <- peaks %>%
dplyr::filter(osa.cnr & !yw.cnr & assay == 'cnr') %>%
GRanges() %>%
resize(width = 1, fix = "center")
fairePeaks.wt <- peaks %>%
dplyr::filter(assay == 'faire' & experiment == 'WT FAIRE Wing Timecourse') %>%
GRanges() %>%
resize(width = 1, fix = "center")
#DONE - remove the peakCat ? since now using log2fold change for these categories...
fairePeaks.deg <- peaks %>%
dplyr::filter(assay == 'faire' & experiment == 'osaGFP deGrad Pupal Wing FAIRE') %>%
#  dplyr::mutate(deg.peakCat = dplyr::case_when(osaGFP.deGrad & !osaGFP.control ~ 'osa ectopic',
#                                               !osaGFP.deGrad & osaGFP.control ~ 'osa dependent',
#                                               osaGFP.deGrad & osaGFP.control ~ 'osa independent',
#                                               T ~ as.character(NA))) %>%  # NA here would be peaks that aren't reproducible or of good quality
dplyr::filter(osaGFP.deGrad | osaGFP.control) %>% # want to only use peaks that are reproducible and of good quality
GRanges() %>%
resize(width = 1, fix = "center")
fairePeaks.osaDependent <- fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent') %>%
GRanges()
fairePeaks.osaIndependent <- fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Independent') %>%
GRanges()
fairePeaks.osaEctopic <- fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Ectopic') %>%
GRanges()
###
# load bws and matrices for heatmaps
###
#TODO - cleanup - move matrices?
bws <- get_bws(dplyr::bind_rows(cnr.ss, faire.wt.ssPool), 'id')
deg.bws <- get_bws(faire.ss %>% dplyr::filter(experiment == 'osaGFP deGrad FAIRE'), 'id')
mats <- purrr::map(bws, ~{
normalizeToMatrix(., osaPeaks, value_column = 'score', keep = c(0.01, 0.99), extend = 2000)
})
names(mats) <- names(bws)
#TODO -- move to utils?
###
# functions
###
plot.frac <- function(x) {
lapply(unique(x$change), function(i) {
x %>%
dplyr::filter(change == i) %>%
ggplot(aes(fraction, change, fill = osa.cnr)) +
geom_bar(stat = 'identity', width = 1) +
geom_text(aes(label = per), position = position_fill(vjust = 0.6),  size = 7, fontface = "bold") +
#geom_text(aes(label = per, position = position_stack(vjust = 0.5))) +
scale_fill_manual(values = c('grey80','#41f0ad'), name = 'Osa Bound') +
scale_y_discrete(position = 'right', ) +
xlab('Percent Bound by Osa') +
theme(legend.position = 'top',
legend.key.size = unit(1, 'cm'),
legend.text = element_text(size = 15),
legend.title = element_text(size = 20),
panel.background = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
#           axis.text.y = element_text(size = 12),
panel.grid = element_blank()) +
NULL
fn = paste0('rPlots/3E_',i,'.png')
ggsave(fn, width = 6, height = 1.5, units = 'in', dpi = 300 )
})
}
fairePeaks.osaDependent %>%
dplyr::arrange(desc(faire_osaDeGrad.log2FoldChange))
