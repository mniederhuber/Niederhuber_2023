#  scale_fill_manual(values = c("#66C2A6",'#F059A2','white')) +
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = 'none',
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent'))
nr %>%
dplyr::group_by(id) %>%
dplyr::mutate(mean_log2 = mean(log2)) %>%
dplyr::select(id, complex_general, mean_log2) %>%
dplyr::arrange(mean_log2) %>%
dplyr::distinct() %>%
tibble::rowid_to_column() %>%
dplyr::filter(rowid >= 39) %>%
#dplyr::mutate(mean_log2 = mean(log2)) %>%
ggplot(aes('', rowid, label = id )) +
#  geom_vline(xintercept = 0, color = "grey50") +
#  geom_vline(xintercept = 0.585, color = "grey50", linetype = "longdash") +
#  geom_boxplot(aes(fill = bap_hits), outlier.size = 0.5) +
#  geom_hline(yintercept = 0.5, color = "red", linetype = "longdash") +
geom_label() +
#geom_label_repel(aes(fill = factor(complex_general)), force = 2, max.overlaps = NA, segment.color = NA) +
#  scale_fill_manual(values = c("#66C2A6",'#F059A2','white')) +
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = 'none',
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent'))
nr %>%
dplyr::group_by(id) %>%
dplyr::mutate(mean_log2 = mean(log2)) %>%
dplyr::select(id, complex_general, mean_log2) %>%
dplyr::arrange(mean_log2) %>%
dplyr::distinct() %>%
tibble::rowid_to_column() %>%
dplyr::filter(rowid >= 39) %>%
ggplot(aes('', rowid, label = id )) +
geom_label(aes(fill = complex_general)) +
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = 'none',
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent'))
nr %>%
dplyr::group_by(id) %>%
dplyr::mutate(mean_log2 = mean(log2)) %>%
dplyr::select(id, complex_general, mean_log2) %>%
dplyr::arrange(mean_log2) %>%
dplyr::distinct() %>%
tibble::rowid_to_column() %>%
dplyr::filter(rowid >= 39) %>%
ggplot(aes('', rowid, label = id )) +
geom_label(aes(fill = complex_general)) +
scale_fill_manual(values = c('magenta','white')) +
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = 'none',
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent'))
nr %>%
dplyr::group_by(id) %>%
dplyr::mutate(mean_log2 = mean(log2)) %>%
dplyr::select(id, complex_general, mean_log2) %>%
dplyr::arrange(mean_log2) %>%
dplyr::distinct() %>%
tibble::rowid_to_column() %>%
dplyr::filter(rowid >= 39) %>%
ggplot(aes('', rowid, label = id )) +
geom_label(aes(fill = complex_general)) +
scale_fill_manual(values = c('white','#fc0388')) +
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = 'none',
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent'))
nr %>%
dplyr::group_by(id) %>%
dplyr::mutate(mean_log2 = mean(log2)) %>%
dplyr::select(id, complex_general, mean_log2) %>%
dplyr::arrange(mean_log2) %>%
dplyr::distinct() %>%
tibble::rowid_to_column() %>%
dplyr::filter(rowid >= 39) %>%
ggplot(aes('', rowid, label = id )) +
geom_label(aes(fill = complex_general)) +
scale_fill_manual(values = c('white','#f57fbe')) +
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = 'none',
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent'))
ggsave('r_out/screen_results_simple-n10.png', width = 3, height = 15, dpi = 300)
ggsave('r_out/screen_results_simple-n10.png', width = 3, height = 3, dpi = 300)
nr %>%
dplyr::group_by(id) %>%
dplyr::mutate(mean_log2 = mean(log2)) %>%
dplyr::select(id, complex_general, mean_log2) %>%
dplyr::arrange(mean_log2) %>%
dplyr::distinct() %>%
tibble::rowid_to_column() %>%
dplyr::filter(rowid >= 38) %>%
ggplot(aes('', rowid, label = id )) +
geom_label(aes(fill = complex_general)) +
scale_fill_manual(values = c('white','#f57fbe')) +
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = 'none',
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent'))
ggsave('r_out/screen_results_simple-n10.png', width = 3, height = 3, dpi = 300)
shn <- data.frame('seqnames' = 'chr2R',
'start' = 11159086,
'end' = 11217394) %>%
GRanges()
#dev.off()
```
track.colors <- c("#B8E186","#F1B6DA", "#4DAC26","#D01C8B")
cnr.ss.browser <- cnr.ss %>%
dplyr::mutate(color = track.colors)
cnr.tracks <- get_cnr_tracks(cnr.ss.browser, ylim = c(0,12))
axis <- Gviz::GenomeAxisTrack(scale = 1000)
#png('rPlots/3B.png', width = 4, height = 4, res = 300, units = 'in')
Gviz::plotTracks(c(axis, cnr.tracks, genetrack), chromosome = seqnames(shn) %>% as.character(),
from = start(shn + 1000),
to = end(shn + 1000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
#dev.off()
cnr.tracks <- get_cnr_tracks(cnr.ss.browser, ylim = c(0,50))
track.colors <- c("#B8E186","#F1B6DA", "grey20","#D01C8B")
cnr.ss.browser <- cnr.ss %>%
dplyr::mutate(color = track.colors)
cnr.tracks <- get_cnr_tracks(cnr.ss.browser, ylim = c(0,50))
axis <- Gviz::GenomeAxisTrack(scale = 1000)
#png('rPlots/3B.png', width = 4, height = 4, res = 300, units = 'in')
Gviz::plotTracks(c(axis, cnr.tracks, genetrack), chromosome = seqnames(shn) %>% as.character(),
from = start(shn + 1000),
to = end(shn + 1000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
#dev.off()
track.colors <- c("#B8E186","#F1B6DA", "grey20","grey40")
cnr.ss.browser <- cnr.ss %>%
dplyr::mutate(color = track.colors)
cnr.tracks <- get_cnr_tracks(cnr.ss.browser, ylim = c(0,60))
axis <- Gviz::GenomeAxisTrack(scale = 1000)
#png('rPlots/3B.png', width = 4, height = 4, res = 300, units = 'in')
Gviz::plotTracks(c(axis, cnr.tracks, genetrack), chromosome = seqnames(shn) %>% as.character(),
from = start(shn + 1000),
to = end(shn + 1000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
#dev.off()
track.colors <- c("#B8E186","grey40", "grey20","#D01C8B")
cnr.ss.browser <- cnr.ss %>%
dplyr::mutate(color = track.colors)
cnr.tracks <- get_cnr_tracks(cnr.ss.browser, ylim = c(0,50))
axis <- Gviz::GenomeAxisTrack(scale = 1000)
#png('rPlots/3B.png', width = 4, height = 4, res = 300, units = 'in')
Gviz::plotTracks(c(axis, cnr.tracks, genetrack), chromosome = seqnames(shn) %>% as.character(),
from = start(shn + 1000),
to = end(shn + 1000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
#dev.off()
track.colors <- c("grey40","#F1B6DA", "grey20","#D01C8B")
cnr.ss.browser <- cnr.ss %>%
dplyr::mutate(color = track.colors)
cnr.tracks <- get_cnr_tracks(cnr.ss.browser, ylim = c(0,50))
axis <- Gviz::GenomeAxisTrack(scale = 1000)
#png('rPlots/3B.png', width = 4, height = 4, res = 300, units = 'in')
Gviz::plotTracks(c(axis, cnr.tracks, genetrack), chromosome = seqnames(shn) %>% as.character(),
from = start(shn + 1000),
to = end(shn + 1000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
#dev.off()
track.colors <- c("grey40","#F1B6DA", "grey20","#D01C8B")
cnr.ss.browser <- cnr.ss %>%
dplyr::mutate(color = track.colors)
cnr.tracks <- get_cnr_tracks(cnr.ss.browser, ylim = c(0,600))
axis <- Gviz::GenomeAxisTrack(scale = 1000)
#png('rPlots/3B.png', width = 4, height = 4, res = 300, units = 'in')
Gviz::plotTracks(c(axis, cnr.tracks, genetrack), chromosome = seqnames(shn) %>% as.character(),
from = start(shn + 1000),
to = end(shn + 1000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
#dev.off()
track.colors <- c("grey40","#F1B6DA", "grey20","#D01C8B")
cnr.ss.browser <- cnr.ss %>%
dplyr::mutate(color = track.colors)
cnr.tracks <- get_cnr_tracks(cnr.ss.browser, ylim = c(0,60))
axis <- Gviz::GenomeAxisTrack(scale = 1000)
#png('rPlots/3B.png', width = 4, height = 4, res = 300, units = 'in')
Gviz::plotTracks(c(axis, cnr.tracks, genetrack), chromosome = seqnames(shn) %>% as.character(),
from = start(shn + 1000),
to = end(shn + 1000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
#dev.off()
track.colors <- c("grey40","#F1B6DA", "grey20","#D01C8B")
cnr.ss.browser <- cnr.ss %>%
dplyr::mutate(color = track.colors)
cnr.tracks <- get_cnr_tracks(cnr.ss.browser, ylim = c(0,65))
axis <- Gviz::GenomeAxisTrack(scale = 1000)
#png('rPlots/3B.png', width = 4, height = 4, res = 300, units = 'in')
Gviz::plotTracks(c(axis, cnr.tracks, genetrack), chromosome = seqnames(shn) %>% as.character(),
from = start(shn + 1000),
to = end(shn + 1000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
#dev.off()
track.colors <- c("grey40","#F1B6DA", "grey20","#D01C8B")
cnr.ss.browser <- cnr.ss %>%
dplyr::mutate(color = track.colors)
cnr.tracks <- get_cnr_tracks(cnr.ss.browser, ylim = c(0,65))
axis <- Gviz::GenomeAxisTrack(scale = 10000)
#png('rPlots/3B.png', width = 4, height = 4, res = 300, units = 'in')
Gviz::plotTracks(c(axis, cnr.tracks, genetrack), chromosome = seqnames(shn) %>% as.character(),
from = start(shn + 1000),
to = end(shn + 1000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
#dev.off()
sbb <- data.frame('seqnames' = 'chr2R',
'start' = 18278198,
'end' = 18357296) %>%
GRanges()
track.colors <- c("grey40","#F1B6DA", "grey20","#D01C8B")
cnr.ss.browser <- cnr.ss %>%
dplyr::mutate(color = track.colors)
cnr.tracks <- get_cnr_tracks(cnr.ss.browser, ylim = c(0,65))
axis <- Gviz::GenomeAxisTrack(scale = 10000)
#png('rPlots/3B.png', width = 4, height = 4, res = 300, units = 'in')
Gviz::plotTracks(c(axis, cnr.tracks, genetrack), chromosome = seqnames(sbb) %>% as.character(),
from = start(sbb + 1000),
to = end(sbb + 1000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
#dev.off()
track.colors <- c("grey40","#F1B6DA", "grey20","#D01C8B")
cnr.ss.browser <- cnr.ss %>%
dplyr::mutate(color = track.colors)
cnr.tracks <- get_cnr_tracks(cnr.ss.browser, ylim = c(0,50))
axis <- Gviz::GenomeAxisTrack(scale = 10000)
#png('rPlots/3B.png', width = 4, height = 4, res = 300, units = 'in')
Gviz::plotTracks(c(axis, cnr.tracks, genetrack), chromosome = seqnames(sbb) %>% as.character(),
from = start(sbb + 5000),
to = end(sbb + 5000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
#dev.off()
track.colors <- c("grey40","#F1B6DA", "grey20","#D01C8B")
cnr.ss.browser <- cnr.ss %>%
dplyr::mutate(color = track.colors)
cnr.tracks <- get_cnr_tracks(cnr.ss.browser, ylim = c(0,50))
axis <- Gviz::GenomeAxisTrack(scale = 10000)
#png('rPlots/3B.png', width = 4, height = 4, res = 300, units = 'in')
Gviz::plotTracks(c(axis, cnr.tracks, genetrack), chromosome = seqnames(sbb) %>% as.character(),
from = start(sbb + 10000),
to = end(sbb + 10000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
#dev.off()
track.colors <- c("grey40","#F1B6DA", "grey20","#D01C8B")
cnr.ss.browser <- cnr.ss %>%
dplyr::mutate(color = track.colors)
cnr.tracks <- get_cnr_tracks(cnr.ss.browser, ylim = c(0,55))
axis <- Gviz::GenomeAxisTrack(scale = 10000)
#png('rPlots/3B.png', width = 4, height = 4, res = 300, units = 'in')
Gviz::plotTracks(c(axis, cnr.tracks, genetrack), chromosome = seqnames(sbb) %>% as.character(),
from = start(sbb + 10000),
to = end(sbb + 10000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
#dev.off()
track.colors <- c("grey40","#F1B6DA", "grey20","#D01C8B")
cnr.ss.browser <- cnr.ss %>%
dplyr::mutate(color = track.colors)
cnr.tracks <- get_cnr_tracks(cnr.ss.browser, ylim = c(0,55))
axis <- Gviz::GenomeAxisTrack(scale = 10000)
png('rPlots/3B-sbb.png', width = 10, height = 4, res = 300, units = 'in')
Gviz::plotTracks(c(axis, cnr.tracks, genetrack), chromosome = seqnames(sbb) %>% as.character(),
from = start(sbb + 10000),
to = end(sbb + 10000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
dev.off()
#TODO - best way to generate replicate average signal tracks
#TODO - functionalize givz plotting -- see SLN e93 gof repo - wrote series of functions for browser shot plotting
#track.colors <- RColorBrewer::brewer.pal(n = 4, "PiYG")
#track.colors <- c("#B8E186","#F1B6DA", "#4DAC26","#D01C8B")
track.colors <- c("grey40","#F1B6DA", "grey20","#D01C8B")
cnr.ss.browser <- cnr.ss %>%
dplyr::mutate(color = track.colors)
cnr.tracks <- get_cnr_tracks(cnr.ss.browser, ylim = c(0,12))
brdisc.at <- Gviz::AnnotationTrack(range = brD, genome = 'dm6', name = 'brDisc', fill = 'grey', col = 'transparent', background.title = 'white', showTitle = F )
axis <- Gviz::GenomeAxisTrack(scale = 1000)
png('rPlots/3B.png', width = 4, height = 4, res = 300, units = 'in')
Gviz::plotTracks(c(axis, cnr.tracks, brdisc.at), chromosome = seqnames(brD) %>% as.character(),
from = start(brD + 1000),
to = end(brD + 1000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
dev.off()
# union osa degrad peaks
deg.mats <- purrr::map(deg.bws, ~{
normalizeToMatrix(., fairePeaks.deg, value_column = 'score', keep = c(0.11,0.99), extend = 1000 )
})
# union osa degrad peaks
deg.mats <- purrr::map(deg.bws, ~{
normalizeToMatrix(., fairePeaks.deg, value_column = 'score', keep = c(0.11,0.99), extend = 1000 )
})
names(deg.mats) <- faire.ss %>%
dplyr::filter(experiment == 'osaGFP deGrad FAIRE') %>%
dplyr::mutate(nm = paste0(stringr::str_split_fixed(id,'_|\\.', n = 5)[,3],
'.',
stringr::str_split_fixed(id,'_|\\.', n = 5)[,5])) %>%
.$nm
common_min = min(unlist(deg.mats))
common_max = max(unlist(deg.mats))
col_fun = circlize::colorRamp2(seq(common_min, common_max, length.out = 6), viridis.hex)
deg.hms <- purrr::map(names(deg.mats), function(x) {
if(grepl('control.Rep1',x)){
EnrichedHeatmap(deg.mats[[x]],
axis_name = c(-1000, 0, 1000),
pos_line = F,
column_title = x,
col = col_fun,
name = 'zScore',
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = 2:4, lwd = 2), axis_param = list(side = 'left', facing = 'outside'), ylim = c(0,8))),
use_raster = F)
}else{
EnrichedHeatmap(deg.mats[[x]],
axis_name = c(-1000, 0, 1000),
pos_line = F,
column_title = x,
col = col_fun,
show_heatmap_legend = F,
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = 2:4, lwd = 2), ylim = c(0,8), axis = F)),
use_raster = F)
}
})
names(deg.hms) <- names(deg.mats)
hms <- deg.hms$control.Rep1 + deg.hms$control.Rep2 + deg.hms$nubG4.Rep1 + deg.hms$nubG4.Rep2
png('rPlots/4B-nogroups.png', width = 5, height = 5, units = 'in', res = 300)
ComplexHeatmap::draw(hms, merge_legend = T, heatmap_legend_side = 'bottom', )
dev.off()
EnrichedHeatmap(deg.mats[[x]],
axis_name = c(-1000, 0, 1000),
pos_line = F,
column_title = x,
col = col_fun,
show_heatmap_legend = F,
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = 2:4, lwd = 2), ylim = c(0,6), axis = F)),
use_raster = F)
deg.hms <- purrr::map(names(deg.mats), function(x) {
if(grepl('control.Rep1',x)){
EnrichedHeatmap(deg.mats[[x]],
axis_name = c(-1000, 0, 1000),
pos_line = F,
column_title = x,
col = col_fun,
name = 'zScore',
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = 2:4, lwd = 2), axis_param = list(side = 'left', facing = 'outside'), ylim = c(0,6))),
use_raster = F)
}else{
EnrichedHeatmap(deg.mats[[x]],
axis_name = c(-1000, 0, 1000),
pos_line = F,
column_title = x,
col = col_fun,
show_heatmap_legend = F,
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = 2:4, lwd = 2), ylim = c(0,6), axis = F)),
use_raster = F)
}
})
names(deg.hms) <- names(deg.mats)
hms <- deg.hms$control.Rep1 + deg.hms$control.Rep2 + deg.hms$nubG4.Rep1 + deg.hms$nubG4.Rep2
png('rPlots/4B-nogroups.png', width = 5, height = 5, units = 'in', res = 300)
ComplexHeatmap::draw(hms, merge_legend = T, heatmap_legend_side = 'bottom', )
dev.off()
png('rPlots/4B-nogroups.png', width = 5, height = 5, units = 'in', res = 300)
ComplexHeatmap::draw(hms, merge_legend = T, heatmap_legend_side = 'right', )
dev.off()
deg.hms <- purrr::map(names(deg.mats), function(x) {
if(grepl('control.Rep1',x)){
EnrichedHeatmap(deg.mats[[x]],
axis_name = c(-1000, 0, 1000),
pos_line = F,
column_title = x,
col = col_fun,
name = 'zScore',
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = 2:4, lwd = 2), axis_param = list(side = 'left', facing = 'outside'), ylim = c(0,7))),
use_raster = F)
}else{
EnrichedHeatmap(deg.mats[[x]],
axis_name = c(-1000, 0, 1000),
pos_line = F,
column_title = x,
col = col_fun,
show_heatmap_legend = F,
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = 2:4, lwd = 2), ylim = c(0,7), axis = F)),
use_raster = F)
}
})
names(deg.hms) <- names(deg.mats)
hms <- deg.hms$control.Rep1 + deg.hms$control.Rep2 + deg.hms$nubG4.Rep1 + deg.hms$nubG4.Rep2
png('rPlots/4B-nogroups.png', width = 5, height = 5, units = 'in', res = 300)
ComplexHeatmap::draw(hms, merge_legend = T, heatmap_legend_side = 'right', )
dev.off()
#TODO - add 36h FAIRE data? better comparison for osa deGrad?
#track.colors <- RColorBrewer::brewer.pal(n = 4, "PiYG")
track.colors <- c("grey70","grey60","grey50", "grey40", 'grey30')
deg.ss.browser <- faire.osaDeGrad.ssPool %>%
dplyr::bind_rows(., faire.wt.ssPool[faire.wt.ssPool$grp == 'wt.3LW' | faire.wt.ssPool$grp == 'wt.24h',]) %>%
dplyr::mutate(color = track.colors)
#TODO - add 36h FAIRE data? better comparison for osa deGrad?
#track.colors <- RColorBrewer::brewer.pal(n = 4, "PiYG")
track.colors <- c("grey70","grey60", "grey40", 'grey30')
deg.ss.browser <- faire.osaDeGrad.ssPool %>%
dplyr::bind_rows(., faire.wt.ssPool[faire.wt.ssPool$grp == 'wt.3LW' | faire.wt.ssPool$grp == 'wt.24h',]) %>%
dplyr::mutate(color = track.colors)
deg.tracks <- get_cnr_tracks(deg.ss.browser, ylim = c(0,15))
deg.tracks <- c(deg.tracks$wt_3LW,
deg.tracks$wt_24h,
deg.tracks$osaGFP.deGrad_control_faire,
deg.tracks$osaGFP.deGrad_nubG4_faire)
brdisc.at <- Gviz::AnnotationTrack(range = brD, genome = 'dm6', name = 'brDisc', fill = 'grey', col = 'transparent', background.title = 'white', showTitle = F )
axis <- Gviz::GenomeAxisTrack(scale = 1000)
png('rPlots/4D.png', width = 4, height = 6, res = 300, units = 'in')
Gviz::plotTracks(c(axis, deg.tracks, brdisc.at), chromosome = seqnames(brD) %>% as.character(),
from = start(brD + 1000),
to = end(brD + 1000),
cex.axis = 0.3,
cex.title = 0.5,
title.width = 1,
innerMargin = 10)
dev.off()
