data.frame() %>%
dplyr::filter(anno.new %in% c('Distal Intergenic', 'Intron')) %>%
GRanges()
# uses rep1 summit coordinates
osaPeaks.summits <- subsetByOverlaps(cnr.summits, osaPeaks.full)
osaPeaks.faire.summits <- subsetByOverlaps(faire.wt.3LW.summits, osaPeaks.full)
fairePeaks.wt <- peaks$faire.wt.df %>%
#  dplyr::filter(assay == 'faire' & experiment == 'WT FAIRE Wing Timecourse') %>%
GRanges() %>%
resize(width = 1, fix = "center")
#redundant... but used in a couple chunks for motif analysis
fairePeaks.wt.full <- peaks$faire.wt.df %>%
dplyr::filter(assay == 'faire'  & experiment == 'WT FAIRE Wing Timecourse')
#DONE - remove the peakCat ? since now using log2fold change for these categories...
# switched to using osaDeg.qF which is a peak set derived from diffbind, that has been subset using iranges by intersect
# with quality filtered peak calls in peaks$faire.osaDeg.df
osaDeg.center <- osaDeg.qF %>%
resize(width = 1, fix = "center")
library(magrittr)
library(ggplot2)
library(ggrepel)
library(GenomicRanges)
library(org.Dm.eg.db)
library(AnnotationDbi)
library(EnrichedHeatmap)
library(ComplexHeatmap)
library(GO.db)
library(patchwork)
source('utils.R')
source('~/NystLib/R/peakUtils.R') #TODO move/rewrite getPeakData from NystLib to utils.R
## load data
load('rData/sheets.rda')
load('rData/peaks.rda')
load('rData/rnaiScreen.rda')
#TODO move RNAseq data into BAP project
# TODO this is in progress - mixed across directories
load('rData/wing-rnaseq-GeTMM.RData')  # GeTMM normalized RNAseq
#loads 'wing.rnaseq'
#load('rData/wing-rnaseq-DDS.RData')  # loads dds.results
## TODO -- no id validation yet need to fix
#rna.dds <- dds.results %>%
#  dplyr::filter(baseMean_6h > 0) %>%
#  tibble::rownames_to_column(var = 'Geneid')
ON.genes <- wing.rnaseq %>%
dplyr::filter(mean >= 2) %>%
dplyr::select(Geneid)
ON.genes %>% write.table('on-rnaseq.txt', sep = '\n', row.names = F, col.names = F, quote = F)
#TODO clean this up - had to write out the on list and use the flybase id validator tool...
ON.genes.validated <- read.table('~/McKay/Wing-RNAseq/on-genes-IDvalidation.txt', header = T) %>%
dplyr::rename(Geneid = submitted_item,
Validated = validated_id,
Symbol = current_symbol)
#TODO move flyfactor database to BAP - code to download to repo?
## load in a flyfacotr fbgn validated .txt - generated with Flybase id validator
## there are 2 'FlyFactor' FBgn codes that are updated two more than 1 unique 'Validated' FBgns in `fbgn.validated`
# FBgn0051782 -- CG31782 in flyfactor - old annotation? no present in Flybase, maybe split into three differen pseudogene annos now
# FBgn0050420 -- is only Atf-2 in flyfactor db
fbgn.validated <- read.table('~/McKay/Motif_databases/FLY/fbgn_validated.txt', header = F, sep = '\t')
colnames(fbgn.validated) <- c('FlyFactor', 'Validated', 'Symbol')
fbgn.validated %<>%
dplyr::filter(FlyFactor != 'FBgn0051782') %>% #drop this FBgn, problematic update to multiple new FBgns of pseudogenes
dplyr::filter(Validated != 'FBgn0265182') # drop this Validated FBgn, which is an incorrectly updated from FBgn0050420
## global variables
###
# assign global variables
###
dm6 <- BSgenome.Dmelanogaster.UCSC.dm6::BSgenome.Dmelanogaster.UCSC.dm6
dm3 <- BSgenome.Dmelanogaster.UCSC.dm3::BSgenome.Dmelanogaster.UCSC.dm3
dm6.TxDb <- TxDb.Dmelanogaster.UCSC.dm6.ensGene::TxDb.Dmelanogaster.UCSC.dm6.ensGene
dm6.promoters <- ChIPseeker::getPromoters(dm6.TxDb, upstream = 500, downstream = 100)
dm6.genes <- GenomicFeatures::genes(dm6.TxDb)
brD <- data.frame('seqnames' = 'chrX',
'start' = 1565708,
'end' = 1567401) %>%
GenomicRanges::GRanges()
shn <- data.frame('seqnames' = 'chr2R',
'start' = 11159086,
'end' = 11217394) %>%
GRanges()
sbb <- data.frame('seqnames' = 'chr2R',
'start' = 18278198,
'end' = 18357296) %>%
GRanges()
# Dl
#chr3R:19,265,389-19,350,508
Dl <- data.frame('seqnames' = 'chr3R',
'start' = 19265389,
'end' = 19350508) %>%
GRanges()
# E(spl)-c
#chr3R:25,980,255-26,065,374
espl <- data.frame('seqnames' = 'chr3R',
'start' = 25980255,
'end' = 26065374) %>%
GRanges()
###
# enhancers
###
redFly_enhancers <- read.table('bed/all_Dmel_CRM-sorted-merged.bed', sep = '\t')
colnames(redFly_enhancers) <- c('seqnames', 'start','end')
redFly_enhancers.ranges <- GRanges(redFly_enhancers)
## memes setup
###
# meme db
###
#TODO - so clunky...
# loading in the fly factor database, drop out a couple of problematic fbgn
# then use the fbgn.validated lookup table for fly factor to update all the old ids to correct ids
# then filter on the on gene list -- which has to go through a similar process of id validation
# gross
meme_db <- universalmotif::read_meme('~/McKay/Motif_databases/FLY/fly_factor_survey.meme') %>%
universalmotif::to_df() %>%
dplyr::group_by(name) %>%
dplyr::filter(!grepl('FBgn0051782|FBgn0265182', name)) %>%  #drop this FBgn, problematic update to multiple new FBgns of pseudogenes
dplyr::mutate(basename = stringr::str_split_fixed(name, '_', n = 2)[[1]],
fbgn.validated = fbgn.validated[fbgn.validated$FlyFactor == basename,]$Validated)
meme_db_on <- meme_db %>%
dplyr::filter(fbgn.validated %in% ON.genes.validated$Validated)
options(meme_db = universalmotif::to_list(meme_db_on, extrainfo = F))
## colors
viridis.hex <- c("#440154","#3b528b","#21918c","#5ec962","#5ec962","#fde725")
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cbPalette.4 <- c("#D81B60","#1E88E5","#FFC107","#004D40")
cbPalette.ibm <- c('#332288','#117733','#44AA99','#88CCEE','#DDCC77','#CC6677','#AA4499','#882255')
## browser
WTFAIRE.colors <- c("grey10","grey20","grey30","grey40","grey50","grey60")
## peak subsets
osaPeaks <- peaks$cnr.df %>%
dplyr::filter(osa.cnr & !yw.cnr) %>%
GRanges() %>%
resize(width = 1, fix = "center")
osaPeaks.full <- peaks$cnr.df %>%
dplyr::filter(osa.cnr & !yw.cnr) %>%
GRanges(seqlengths = seqlengths(dm6))
osaPeaks.enhancers.full <- osaPeaks.full %>%
data.frame() %>%
dplyr::filter(anno.new %in% c('Distal Intergenic', 'Intron')) %>%
GRanges()
# uses rep1 summit coordinates
osaPeaks.summits <- subsetByOverlaps(cnr.summits, osaPeaks.full)
osaPeaks.faire.summits <- subsetByOverlaps(faire.wt.3LW.summits, osaPeaks.full)
fairePeaks.wt <- peaks$faire.wt.df %>%
#  dplyr::filter(assay == 'faire' & experiment == 'WT FAIRE Wing Timecourse') %>%
GRanges() %>%
resize(width = 1, fix = "center")
#redundant... but used in a couple chunks for motif analysis
fairePeaks.wt.full <- peaks$faire.wt.df %>%
dplyr::filter(assay == 'faire'  & experiment == 'WT FAIRE Wing Timecourse')
#DONE - remove the peakCat ? since now using log2fold change for these categories...
# switched to using osaDeg.qF which is a peak set derived from diffbind, that has been subset using iranges by intersect
# with quality filtered peak calls in peaks$faire.osaDeg.df
osaDeg.center <- osaDeg.qF %>%
data.frame() %>%
resize(width = 1, fix = "center")
#DONE - remove the peakCat ? since now using log2fold change for these categories...
# switched to using osaDeg.qF which is a peak set derived from diffbind, that has been subset using iranges by intersect
# with quality filtered peak calls in peaks$faire.osaDeg.df
osaDeg.center <- osaDeg.qF %>%
GRanges() %>%
resize(width = 1, fix = "center")
# rotund peaks
rn.peaks <- peaks$rn.df %>%
GRanges()
rn.distal <- rn.peaks %>%
dplyr::filter(anno.new %in% c('Distal Intergenic', 'Intron')) %>%
GRanges()
# genomic 500bp
dm6.500bp <- peaks$dm6.500bp %>%
GRanges() %>%
resize(width = 1, fix = 'center')
#fairePeaks.osaDependent <- fairePeaks.deg %>%
#  data.frame() %>%
#  dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent') %>%
#  GRanges()
#
#fairePeaks.osaIndependent <- fairePeaks.deg %>%
#  data.frame() %>%
#  dplyr::filter(faireCat.osaDeGrad == 'Osa Independent') %>%
#  GRanges()
#
#fairePeaks.osaEctopic <- fairePeaks.deg %>%
#  data.frame() %>%
#  dplyr::filter(faireCat.osaDeGrad == 'Osa Ectopic') %>%
#  GRanges()
## load bws
#TODO - cleanup - move matrices?
bws <- get_bws(dplyr::bind_rows(cnr.ss, faire.wt.ssPool), 'id')
deg.bws <- get_bws(faire.ss %>% dplyr::filter(experiment == 'osaGFP deGrad FAIRE'), 'id')
#TODO move data to main project directory and fix path
#TODO merge reps?
#k27ac.bw <- rtracklayer::import.bw('~/mckay/h3k27ac_cnr/bigwig/yw-3LW-wing-ak27ac-pel-Rep1_dm6_trim_q5_dupsRemoved_allFrags_rpgcNorm_zNorm.bw')
k27ac.bw <- rtracklayer::import.bw('~/mckay/H3K27ac_CnR/BigWig/yw-3LW-wing-ak27ac-pel-MEAN_dm6_trim_q5_dupsRemoved_150to700_rpgcNorm_zNorm.bw')
k14ac.bw <- rtracklayer::import.bw('~/mckay/Regadas_2021/H3K14ac_log2Input_repsMEAN.bw')
## functions
plot.frac <- function(x) {
lapply(unique(x$change), function(i) {
x %>%
dplyr::filter(change == i) %>%
ggplot(aes(fraction, change, fill = Osa.Bound)) +
geom_bar(stat = 'identity', width = 1) +
geom_text(aes(label = per), position = position_fill(vjust = 0.6),  size = 7, fontface = "bold") +
#geom_text(aes(label = per, position = position_stack(vjust = 0.5))) +
scale_fill_manual(values = c('grey80','#41f0ad'), name = 'Osa Bound') +
scale_y_discrete(position = 'right', ) +
xlab('Percent Bound by Osa') +
theme(legend.position = 'top',
legend.key.size = unit(1, 'cm'),
legend.text = element_text(size = 15),
legend.title = element_text(size = 20),
panel.background = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
#           axis.text.y = element_text(size = 12),
panel.grid = element_blank()) +
NULL
fn = paste0('rPlots/3E_',i,'.png')
ggsave(fn, width = 6, height = 1.5, units = 'in', dpi = 300 )
})
}
## .bed out
osaPeaks %>%
data.frame() %>%
dplyr::select(seqnames, start, end) %>%
write.table('osaPeaks.bed', quote = F, col.names = F, row.names = F, sep = '\t')
osaPeaks.full %>%
data.frame() %>%
dplyr::select(seqnames, start, end) %>%
write.table('osaPeaks-full.bed', quote = F, col.names = F, row.names = F, sep = '\t')
peaks$cnr.df %>%
data.frame() %>%
dplyr::filter(yw.cnr) %>%
dplyr::select(seqnames, start, end) %>%
write.table('controlPeaks.bed', quote = F, col.names = F, row.names = F, sep = '\t')
#fairePeaks.osaDependent %>%
#  data.frame() %>%
#  dplyr::select(seqnames, start, end) %>%
#  write.table('osaDependent.bed', quote = F, col.names = F, row.names = F, sep = '\t')
#
#fairePeaks.osaEctopic %>%
#  data.frame() %>%
#  dplyr::select(seqnames, start, end) %>%
#  write.table('osaEctopic.bed', quote = F, col.names = F, row.names = F, sep = '\t')
#
## gviz
track.colors <- c("grey40","#D01C8B", "grey40","#D01C8B")
cnr.ss.browser <- cnr.ss %>% dplyr::mutate(color = track.colors)
mckay_enhancers <- read.table('bed/cloned_enhancers_dm6.bed', sep = '\t')
Delta_enhancers <- read.table('bed/cloned_Delta_enhancers.bed', sep = '\t')
espl_enhancers <- read.table('bed/espl_enhancers-merge.bed', sep = '\t')
enhancers <- dplyr::bind_rows(Delta_enhancers, espl_enhancers)
colnames(enhancers) <- c('seqnames', 'start','end','name')
enhancer.ranges <- GRanges(enhancers)
enhancertrack <- Gviz::AnnotationTrack(range = enhancer.ranges,
genome = 'dm6',
fill = '#2febeb',
col = 'transparent',
background.title = 'white',
showTitle = F)
genetrack <- Gviz::GeneRegionTrack(range = dm6.TxDb, fill = 'grey80', showTitle = F, background.title = 'white', stacking = 'squish')
peakTrack <- Gviz::AnnotationTrack(range = osaPeaks.full,
genome = 'dm6',
fill = '#D01C8B',
col = 'transparent',
background.title = 'white',
showTitle = F )
osaDep.peakTrack <- Gviz::AnnotationTrack(range = GRanges(peaks$faire.osaDeg.df %>% dplyr::filter(osa.dependent)),
#osaDep.peakTrack <- Gviz::AnnotationTrack(range = osaDeg.osaDep,
genome = 'dm6',
fill = '#469ae8',
col = 'transparent',
background.title = 'white',
showTitle = F)
hairless_peaks <- read.table('bed/hairless-dm6.bed', col.names = c('seqnames', 'start', 'end')) %>% GRanges()
hTrack <- Gviz::AnnotationTrack(range = hairless_peaks,
genome = 'dm6',
fill = '#f27d00',
col = 'transparent',
background.title = 'white',
showTitle = F)
spacer <- Gviz::AnnotationTrack(background.title = 'white')
## matrices for heatmaps
mats <- purrr::map(bws, ~{
normalizeToMatrix(., osaPeaks, value_column = 'score', keep = c(0.01, 0.99), extend = 2000)
})
names(mats) <- names(bws)
osaDeg.center
osaDeg.qF
#TODO - are heatmaps misleading? is this difficult to parse when split by these different peak call groups?
cols <- c('black', '#469ae8')
deg.mats
# union osa degrad peaks
deg.mats <- purrr::map(deg.bws, ~{
normalizeToMatrix(.,
osaDeg.center,
value_column = 'score',
keep = c(0.09,0.99),
extend = 1000 )
})
names(deg.mats) <- faire.ss %>%
dplyr::filter(experiment == 'osaGFP deGrad FAIRE') %>%
dplyr::mutate(nm = paste0(stringr::str_split_fixed(id,'_|\\.', n = 5)[,3],
'.',
stringr::str_split_fixed(id,'_|\\.', n = 5)[,5])) %>%
.$nm
common_min = min(unlist(deg.mats))
common_max = max(unlist(deg.mats))
col_fun = circlize::colorRamp2(seq(common_min, common_max, length.out = 6), viridis.hex)
#deg.count <- fairePeaks.deg %>%
#  data.frame() %>%
#  dplyr::group_by(faireCat.osaDeGrad) %>% #peak category assigned in peaks.R
#  dplyr::tally() %>%
#  .$n
#names(deg.count) <- c('Osa Dependent', 'Osa Ectopic', 'Osa Independent')
#groups <- fairePeaks.deg$faireCat.osaDeGrad
#lgd = Legend(at = c("Osa Dependent", "Osa Ectopic", "Osa Independent"), legend_gp = gpar(fill = cols))
deg.hms <- purrr::map(names(deg.mats), function(x) {
if(grepl('control.Rep1',x)){
EnrichedHeatmap(deg.mats[[x]],
axis_name = c(-1000, 0, 1000),
pos_line = F,
column_title = x,
col = col_fun,
name = 'zScore',
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = cols, lwd = 2),
axis_param = list(side = 'left', facing = 'outside'),
ylim = c(0,6))),
use_raster = F)
}else{
EnrichedHeatmap(deg.mats[[x]],
axis_name = c(-1000, 0, 1000),
pos_line = F,
column_title = x,
col = col_fun,
show_heatmap_legend = F,
row_title = NULL,
top_annotation = HeatmapAnnotation(enriched = anno_enriched(gp = gpar(col = cols,
lwd = 2),
ylim = c(0,6),
axis = F)),
use_raster = F)
}
})
names(deg.hms) <- names(deg.mats)
hms <- deg.hms$control.Rep1 + deg.hms$control.Rep2 + deg.hms$nubG4.Rep1 + deg.hms$nubG4.Rep2
png('rPlots/3B.png', width = 3, height = 5, units = 'in', res = 300)
ComplexHeatmap::draw(hms,
# annotation_legend_list = c(lgd),
# row_split = groups,
merge_legend = T,
heatmap_legend_side = 'right')
dev.off()
#fairePeaks.deg %>%
#  data.frame() %>%
#  dplyr::mutate(osa.cnr.specific = ifelse(osa.cnr & !yw.cnr,T,F)) %>%
#  dplyr::group_by(faireCat.osaDeGrad, osa.cnr) %>%
#  dplyr::tally()
#  dplyr::mutate(fraction = n / sum(n),
#                change = faireCat.osaDeGrad) %>%
#  dplyr::mutate(per = paste0(round(100*fraction, digits = 1),'%')) %>%
#  plot.frac()
osaDeg.qF %>%
data.frame() %>%
ggplot(aes(log2FoldChange, padj)) +
geom_point(color = ifelse(data.frame(osaDeg.qF)$padj <= 0.1, 'red','black')) +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
ggsave('rPlots/3E-diffBind.png', width =4, height = 3.5, dpi = 300)
osaDeg.qF
osaDeg.qF %>%
dplyr::filter()
osaDeg.qF %>%
dplyr::filter(log2FoldChange <=-1)
osaDeg.qF %>%
dplyr::filter(log2FoldChange <=-1 & padj <=01)
osaDeg.qF %>%
dplyr::filter(log2FoldChange <=-1 & padj <=0.1)
plot.df <- osaDep.anno %>% #osaDep.anno has the wt faire data added
dplyr::select(peak, dplyr::matches("faire.\\d{1,2}h.zScore|faire.3LW.zScore")) %>%
tidyr::pivot_longer(dplyr::matches("faire.\\d{1,2}h.zScore|faire.3LW.zScore")) %>%
dplyr::mutate(stage = stringr::str_split_fixed(name,'\\.', n = 3)[,2], ) %>%
dplyr::group_by(peak)  %>%
dplyr::mutate(value = value + 1,
norm = log2(value/value[stage == '3LW'])) %>%
tidyr::pivot_wider(id_cols = peak, names_from = stage, values_from = norm) %>%
dplyr::mutate(group = dplyr::case_when(`24h` >= 1 | `36h` >= 1 | `44h` >= 1 ~ 'UP',
`24h` > -1 & `24h` < 1 & `36h` > -1 & `36h` < 1 & `44h` > -1 & `44h` < 1 ~ 'STATIC',
T ~ 'DOWN')) %>%
tidyr::pivot_longer(dplyr::matches("\\d"), names_to = 'stage') %>%
dplyr::mutate(stage = factor(stage, levels = c('3LW', '6h', '18h','24h','36h','44h'))) %>%
dplyr::group_by(group,stage) %>%
dplyr::summarise(mean = mean(value),
sd = sd(value) ,
n = dplyr::n()) %>%
dplyr::group_by(stage) %>%
dplyr::mutate(frac = n/sum(n),
per = paste0(round(frac*100,2),'%'),
title = paste0(group,' n=',n,' (',per,')'),
title = factor(title, levels = c('UP n=231 (63.99%)',
'STATIC n=115 (31.86%)',
'DOWN n=15 (4.16%)')))
plot.df %>%
ggplot(aes(stage, mean, group = group)) +
geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd), alpha = 0.4) +
geom_line() +
#  geom_text(data = plot.df, aes(label = paste0('n=',n,' (',per,')'), x = 4, y = 2), size = 6) +
# scale_fill_manual(values = c('#d9435e','grey60','#69d943')) +
facet_wrap(~title, ncol = 3) +
theme(legend.position = 'none') +
NULL
ggsave('rPlots/3G.png', width = 6, height = 3 , dpi = 300)
plot.df <- osaDep.anno %>% #osaDep.anno has the wt faire data added
dplyr::select(peak, dplyr::matches("faire.\\d{1,2}h.zScore|faire.3LW.zScore")) %>%
tidyr::pivot_longer(dplyr::matches("faire.\\d{1,2}h.zScore|faire.3LW.zScore")) %>%
dplyr::mutate(stage = stringr::str_split_fixed(name,'\\.', n = 3)[,2], ) %>%
dplyr::group_by(peak)  %>%
dplyr::mutate(value = value + 1,
norm = log2(value/value[stage == '3LW'])) %>%
tidyr::pivot_wider(id_cols = peak, names_from = stage, values_from = norm) %>%
dplyr::mutate(group = dplyr::case_when(`24h` >= 1 | `36h` >= 1 | `44h` >= 1 ~ 'UP',
`24h` > -1 & `24h` < 1 & `36h` > -1 & `36h` < 1 & `44h` > -1 & `44h` < 1 ~ 'STATIC',
T ~ 'DOWN')) %>%
tidyr::pivot_longer(dplyr::matches("\\d"), names_to = 'stage') %>%
dplyr::mutate(stage = factor(stage, levels = c('3LW', '6h', '18h','24h','36h','44h'))) %>%
dplyr::group_by(group,stage) %>%
dplyr::summarise(mean = mean(value),
sd = sd(value) ,
n = dplyr::n()) %>%
dplyr::group_by(stage) %>%
dplyr::mutate(frac = n/sum(n),
per = paste0(round(frac*100,2),'%'),
title = paste0(group,' n=',n,' (',per,')'))
plot.df %>%
ggplot(aes(stage, mean, group = group)) +
geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd), alpha = 0.4) +
geom_line() +
#  geom_text(data = plot.df, aes(label = paste0('n=',n,' (',per,')'), x = 4, y = 2), size = 6) +
# scale_fill_manual(values = c('#d9435e','grey60','#69d943')) +
facet_wrap(~title, ncol = 3) +
theme(legend.position = 'none') +
NULL
group = factor(group, levels = c('UP','STATIC','DOWN'))
plot.df <- osaDep.anno %>% #osaDep.anno has the wt faire data added
dplyr::select(peak, dplyr::matches("faire.\\d{1,2}h.zScore|faire.3LW.zScore")) %>%
tidyr::pivot_longer(dplyr::matches("faire.\\d{1,2}h.zScore|faire.3LW.zScore")) %>%
dplyr::mutate(stage = stringr::str_split_fixed(name,'\\.', n = 3)[,2], ) %>%
dplyr::group_by(peak)  %>%
dplyr::mutate(value = value + 1,
norm = log2(value/value[stage == '3LW'])) %>%
tidyr::pivot_wider(id_cols = peak, names_from = stage, values_from = norm) %>%
dplyr::mutate(group = dplyr::case_when(`24h` >= 1 | `36h` >= 1 | `44h` >= 1 ~ 'UP',
`24h` > -1 & `24h` < 1 & `36h` > -1 & `36h` < 1 & `44h` > -1 & `44h` < 1 ~ 'STATIC',
T ~ 'DOWN')) %>%
tidyr::pivot_longer(dplyr::matches("\\d"), names_to = 'stage') %>%
dplyr::mutate(stage = factor(stage, levels = c('3LW', '6h', '18h','24h','36h','44h'))) %>%
dplyr::group_by(group,stage) %>%
dplyr::summarise(mean = mean(value),
sd = sd(value) ,
n = dplyr::n()) %>%
dplyr::group_by(stage) %>%
dplyr::mutate(frac = n/sum(n),
per = paste0(round(frac*100,2),'%'),
title = paste0(group,' n=',n,' (',per,')'),
group = factor(group, levels = c('UP','STATIC','DOWN'))
title = factor(title, levels = c('UP n=231 (63.99%)',
plot.df <- osaDep.anno %>% #osaDep.anno has the wt faire data added
dplyr::select(peak, dplyr::matches("faire.\\d{1,2}h.zScore|faire.3LW.zScore")) %>%
tidyr::pivot_longer(dplyr::matches("faire.\\d{1,2}h.zScore|faire.3LW.zScore")) %>%
dplyr::mutate(stage = stringr::str_split_fixed(name,'\\.', n = 3)[,2], ) %>%
dplyr::group_by(peak)  %>%
dplyr::mutate(value = value + 1,
norm = log2(value/value[stage == '3LW'])) %>%
tidyr::pivot_wider(id_cols = peak, names_from = stage, values_from = norm) %>%
dplyr::mutate(group = dplyr::case_when(`24h` >= 1 | `36h` >= 1 | `44h` >= 1 ~ 'UP',
`24h` > -1 & `24h` < 1 & `36h` > -1 & `36h` < 1 & `44h` > -1 & `44h` < 1 ~ 'STATIC',
T ~ 'DOWN')) %>%
tidyr::pivot_longer(dplyr::matches("\\d"), names_to = 'stage') %>%
dplyr::mutate(stage = factor(stage, levels = c('3LW', '6h', '18h','24h','36h','44h'))) %>%
dplyr::group_by(group,stage) %>%
dplyr::summarise(mean = mean(value),
sd = sd(value) ,
n = dplyr::n()) %>%
dplyr::group_by(stage) %>%
dplyr::mutate(frac = n/sum(n),
per = paste0(round(frac*100,2),'%'),
title = paste0(group,' n=',n,' (',per,')'),
group = factor(group, levels = c('UP','STATIC','DOWN')))
plot.df %>%
ggplot(aes(stage, mean, group = group)) +
geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd), alpha = 0.4) +
geom_line() +
#  geom_text(data = plot.df, aes(label = paste0('n=',n,' (',per,')'), x = 4, y = 2), size = 6) +
# scale_fill_manual(values = c('#d9435e','grey60','#69d943')) +
facet_wrap(~group, ncol = 3) +
theme(legend.position = 'none') +
NULL
ggsave('rPlots/3G.png', width = 6, height = 3 , dpi = 300)
plot.df
ChIPpeakAnno::makeVennDiagram(list(peaks$faire.osaDeg.df %>% dplyr::filter(osaDeg) %>% GRanges(),
peaks$faire.osaDeg.df %>% dplyr::filter(osaDeg.control) %>% GRanges()))
osaDeg.qF
ChIPpeakAnno::makeVennDiagram(list(osaDeg.qF %>% dplyr::filter(osaDeg) %>% GRanges(),
osaDeg.qF %>% dplyr::filter(osaDeg.control) %>% GRanges()))
nrow(peaks$faire.osaDeg.df %>% dplyr::filter(osaDeg | osaDeg.control))
nrow(peaks$faire.osaDeg.df %>% dplyr::filter(osaDeg))
nrow(peaks$faire.osaDeg.df %>% dplyr::filter(osaDeg.control))
nrow(test %>% dplyr::filter(osaDeg | osaDeg.control))
nrow(test %>% dplyr::filter(osaDeg))
nrow(test %>% dplyr::filter(osaDeg.control))
nrow(osaDeg.qF %>% data.frame())
nrow(test %>% dplyr::filter(!osaDeg & !osaDeg.control))
