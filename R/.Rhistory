}
closing.osaBound.PLOT <- goEnrich(closing.osaBound, closing, 'closing.osaBound')
static.osaBound.PLOT <- goEnrich(static.osaBound, static, 'static.osaBound')
ggsave(plot = closing.osaBound.PLOT, file = 'rPlots/go-enrich-closing_osaBound.png', width = 10, height = 10, dpi = 300)
ggsave(plot = static.osaBound.PLOT, file = 'rPlots/go-enrich-static_osaBound.png', width = 10, height = 10, dpi = 300)
goEnrich <- function(geneList, universe, name) {
go <- select(org.Dm.eg.db, keys = geneList$Geneid, columns = c('SYMBOL','GO','ENTREZID'), keytype = 'FLYBASE')
go.universe <- select(org.Dm.eg.db, keys = universe$Geneid, columns = c('SYMBOL','GO','ENTREZID'), keytype = 'FLYBASE')
ggo <- clusterProfiler::enrichGO(gene = go$ENTREZID,
universe = go.universe,
OrgDb = org.Dm.eg.db,
ont = 'BP',
readable = T)
ggo.df <- data.frame(ggo)
return(ggo.df)
simMatrix <- rrvgo::calculateSimMatrix(ggo.df$ID,
orgdb='org.Dm.eg.db',
ont='BP',
method='Rel', keytype = 'ENTREZID', semdata = goData)
scores <- setNames(-log10(ggo.df$qvalue), ggo.df$ID)
reducedTerms <- rrvgo::reduceSimMatrix(simMatrix, scores, threshold = 0.4, orgdb = org.Dm.eg.db)
reducedTerms %>%
dplyr::group_by(cluster, parentTerm) %>%
dplyr::mutate(neg_log10_qval = mean(score)) %>%
dplyr::ungroup() %>%
dplyr::select(parentTerm, neg_log10_qval) %>%
dplyr::group_by(parentTerm, neg_log10_qval) %>%
dplyr::summarise() %>%
dplyr::ungroup() %>%
dplyr::slice_max(neg_log10_qval, n = 15) %>%
dplyr::mutate(parentTerm = factor(parentTerm),
parentTerm = forcats::fct_reorder(parentTerm, neg_log10_qval)) %>%
ggplot(aes('', parentTerm, fill = neg_log10_qval)) +
geom_tile() +
scale_fill_viridis_b(name = 'avg\n-log10(qval)') +
ggtitle(name) +
theme(axis.text = element_text(size = 12),
axis.title = element_blank(),
axis.ticks.x = element_blank(),
legend.text = element_text(size = 12),
legend.title = element_text(size = 12))
}
closing.osaBound.PLOT <- goEnrich(closing.osaBound, closing, 'closing.osaBound')
closing.osaBound.PLOT
static.osaBound.PLOT
static.osaBound.PLOT <- goEnrich(static.osaBound, static, 'static.osaBound')
closing.osaBound.PLOT
static.osaBound.PLOT
osaBound <- fairePeaks.dm6 %>%
dplyr::filter(osa.cnr & !yw.cnr) %>%
dplyr::filter(L3_mean >= 2 | h24_mean >= 2) %>%
dplyr::select(Geneid) %>%
dplyr::distinct() %>%
dplyr::mutate(grp = 'osaBound')
allFAIRE <- fairePeaks.dm6 %>%
#  dplyr::filter(!osa.cnr | osa.cnr & yw.cnr) %>%
dplyr::filter(L3_mean >= 2 | h24_mean >= 2) %>%
dplyr::select(Geneid) %>%
dplyr::distinct() %>%
dplyr::mutate(grp = 'osaUnBound')
osaBound.PLOT <- goEnrich(osaBound, allFAIRE, 'osaBound')
ggsave(plot = osaBound.PLOT, file = 'rPlots/go-enrich-osaBound.png', width = 10, height = 8, dpi = 300)
osaBound.PLOT
closing.osaBound.PLOT
osaBound
GOSemSim::mgeneSim(osaBound$Geneid, semData = goData)
fairePeaks.dm6 %>%
dplyr::filter(osa.cnr & !yw.cnr) %>%
dplyr::filter(L3_mean >= 2 | h24_mean >= 2)
osaBound.entrez <- select(org.Dm.eg.db, keys = osaBound$Geneid, columns = c('SYMBOL','GO','ENTREZID'), keytype = 'FLYBASE')
osaBound.entrez
osaBound.entrez$ENTREZID
osaBound.entrez$
fairePeaks.dm6 %>%
dplyr::filter(osa.cnr & !yw.cnr) %>%
dplyr::filter(L3_mean >= 2 | h24_mean >= 2)
osaBound.entrez
goEnrich <- function(geneList, universe, name) {
#  go <- select(org.Dm.eg.db, keys = geneList$Geneid, columns = c('SYMBOL','GO','ENTREZID'), keytype = 'FLYBASE')
#  go.universe <- select(org.Dm.eg.db, keys = universe$Geneid, columns = c('SYMBOL','GO','ENTREZID'), keytype = 'FLYBASE')
ggo <- clusterProfiler::enrichGO(#gene = go$ENTREZID,
gene = geneList$Geneid,
universe = universe$Geneid,
OrgDb = org.Dm.eg.db,
keyType = 'FLYBASE',
ont = 'BP',
readable = T)
ggo.df <- data.frame(ggo)
return(ggo.df)
simMatrix <- rrvgo::calculateSimMatrix(ggo.df$ID,
orgdb='org.Dm.eg.db',
ont='BP',
method='Rel', keytype = 'ENTREZID', semdata = goData)
scores <- setNames(-log10(ggo.df$qvalue), ggo.df$ID)
reducedTerms <- rrvgo::reduceSimMatrix(simMatrix, scores, threshold = 0.4, orgdb = org.Dm.eg.db)
reducedTerms %>%
dplyr::group_by(cluster, parentTerm) %>%
dplyr::mutate(neg_log10_qval = mean(score)) %>%
dplyr::ungroup() %>%
dplyr::select(parentTerm, neg_log10_qval) %>%
dplyr::group_by(parentTerm, neg_log10_qval) %>%
dplyr::summarise() %>%
dplyr::ungroup() %>%
dplyr::slice_max(neg_log10_qval, n = 15) %>%
dplyr::mutate(parentTerm = factor(parentTerm),
parentTerm = forcats::fct_reorder(parentTerm, neg_log10_qval)) %>%
ggplot(aes('', parentTerm, fill = neg_log10_qval)) +
geom_tile() +
scale_fill_viridis_b(name = 'avg\n-log10(qval)') +
ggtitle(name) +
theme(axis.text = element_text(size = 12),
axis.title = element_blank(),
axis.ticks.x = element_blank(),
legend.text = element_text(size = 12),
legend.title = element_text(size = 12))
}
goEnrich <- function(geneList, universe, name) {
#  go <- select(org.Dm.eg.db, keys = geneList$Geneid, columns = c('SYMBOL','GO','ENTREZID'), keytype = 'FLYBASE')
#  go.universe <- select(org.Dm.eg.db, keys = universe$Geneid, columns = c('SYMBOL','GO','ENTREZID'), keytype = 'FLYBASE')
ggo <- clusterProfiler::enrichGO(#gene = go$ENTREZID,
gene = geneList$Geneid,
universe = universe$Geneid,
OrgDb = org.Dm.eg.db,
keyType = 'FLYBASE',
ont = 'BP',
readable = T)
ggo.df <- data.frame(ggo)
#return(ggo.df)
simMatrix <- rrvgo::calculateSimMatrix(ggo.df$ID,
orgdb='org.Dm.eg.db',
ont='BP',
method='Rel', keytype = 'ENTREZID', semdata = goData)
scores <- setNames(-log10(ggo.df$qvalue), ggo.df$ID)
reducedTerms <- rrvgo::reduceSimMatrix(simMatrix, scores, threshold = 0.4, orgdb = org.Dm.eg.db)
reducedTerms %>%
dplyr::group_by(cluster, parentTerm) %>%
dplyr::mutate(neg_log10_qval = mean(score)) %>%
dplyr::ungroup() %>%
dplyr::select(parentTerm, neg_log10_qval) %>%
dplyr::group_by(parentTerm, neg_log10_qval) %>%
dplyr::summarise() %>%
dplyr::ungroup() %>%
dplyr::slice_max(neg_log10_qval, n = 15) %>%
dplyr::mutate(parentTerm = factor(parentTerm),
parentTerm = forcats::fct_reorder(parentTerm, neg_log10_qval)) %>%
ggplot(aes('', parentTerm, fill = neg_log10_qval)) +
geom_tile() +
scale_fill_viridis_b(name = 'avg\n-log10(qval)') +
ggtitle(name) +
theme(axis.text = element_text(size = 12),
axis.title = element_blank(),
axis.ticks.x = element_blank(),
legend.text = element_text(size = 12),
legend.title = element_text(size = 12))
}
closing.osaBound.PLOT <- goEnrich(closing.osaBound, closing, 'closing.osaBound')
static.osaBound.PLOT <- goEnrich(static.osaBound, static, 'static.osaBound')
closing.osaBound.PLOT
static.osaBound.PLOT
ggsave(plot = closing.osaBound.PLOT, file = 'rPlots/go-enrich-closing_osaBound.png', width = 10, height = 10, dpi = 300)
ggsave(plot = static.osaBound.PLOT, file = 'rPlots/go-enrich-static_osaBound.png', width = 10, height = 10, dpi = 300)
goEnrich <- function(geneList, universe, name) {
#  go <- select(org.Dm.eg.db, keys = geneList$Geneid, columns = c('SYMBOL','GO','ENTREZID'), keytype = 'FLYBASE')
#  go.universe <- select(org.Dm.eg.db, keys = universe$Geneid, columns = c('SYMBOL','GO','ENTREZID'), keytype = 'FLYBASE')
ggo <- clusterProfiler::enrichGO(#gene = go$ENTREZID,
gene = geneList$Geneid,
universe = universe$Geneid,
OrgDb = org.Dm.eg.db,
keyType = 'FLYBASE',
ont = 'BP',
readable = T)
ggo.df <- data.frame(ggo)
#return(ggo.df)
simMatrix <- rrvgo::calculateSimMatrix(ggo.df$ID,
orgdb='org.Dm.eg.db',
ont='BP',
method='Wang', keytype = 'ENTREZID', semdata = goData)
scores <- setNames(-log10(ggo.df$qvalue), ggo.df$ID)
reducedTerms <- rrvgo::reduceSimMatrix(simMatrix, scores, threshold = 0.4, orgdb = org.Dm.eg.db)
reducedTerms %>%
dplyr::group_by(cluster, parentTerm) %>%
dplyr::mutate(neg_log10_qval = mean(score)) %>%
dplyr::ungroup() %>%
dplyr::select(parentTerm, neg_log10_qval) %>%
dplyr::group_by(parentTerm, neg_log10_qval) %>%
dplyr::summarise() %>%
dplyr::ungroup() %>%
dplyr::slice_max(neg_log10_qval, n = 15) %>%
dplyr::mutate(parentTerm = factor(parentTerm),
parentTerm = forcats::fct_reorder(parentTerm, neg_log10_qval)) %>%
ggplot(aes('', parentTerm, fill = neg_log10_qval)) +
geom_tile() +
scale_fill_viridis_b(name = 'avg\n-log10(qval)') +
ggtitle(name) +
theme(axis.text = element_text(size = 12),
axis.title = element_blank(),
axis.ticks.x = element_blank(),
legend.text = element_text(size = 12),
legend.title = element_text(size = 12))
}
closing.osaBound.PLOT <- goEnrich(closing.osaBound, closing, 'closing.osaBound')
static.osaBound.PLOT <- goEnrich(static.osaBound, static, 'static.osaBound')
closing.osaBound.PLOT
static.osaBound.PLOT
ggsave(plot = closing.osaBound.PLOT, file = 'rPlots/go-enrich-closing_osaBound.png', width = 10, height = 10, dpi = 300)
ggsave(plot = static.osaBound.PLOT, file = 'rPlots/go-enrich-static_osaBound.png', width = 10, height = 10, dpi = 300)
osaBound.PLOT <- goEnrich(osaBound, allFAIRE, 'osaBound')
osaBound.PLOT <- goEnrich(osaBound, allFAIRE, 'osaBound')
osaBound.PLOT
ggsave(plot = osaBound.PLOT, file = 'rPlots/go-enrich-osaBound.png', width = 10, height = 8, dpi = 300)
down <- fairePeaks.dm6 %>%
dplyr::filter(L3_mean >= 2 & cat == 'down') %>%
dplyr::select(Geneid) %>%
dplyr::distinct()
closing.down.osaBound <- fairePeaks.dm6 %>%
dplyr::filter(faireCat.3LW_24h == 'closing' & L3_mean >= 2 & cat == 'down' & osa.cnr & !yw.cnr) %>%
dplyr::select(Geneid) %>%
dplyr::distinct()
closing.static.osaBound <- fairePeaks.dm6 %>%
dplyr::filter(faireCat.3LW_24h == 'closing' & L3_mean >= 2 & cat == 'static' & osa.cnr & !yw.cnr) %>%
dplyr::select(Geneid) %>%
dplyr::distinct()
closing.down.osaBound.PLOT <- goEnrich(closing.down.osaBound, down, 'closing.osaBound')
static.down.osaBound.PLOT <- goEnrich(static.down.osaBound, down, 'static.osaBound')
closing.down.osaBound.PLOT
static.down.osaBound.PLOT
#ggsave(plot = closing.osaBound.PLOT, file = 'rPlots/go-enrich-closing_osaBound.png', width = 10, height = 10, dpi = 300)
#ggsave(plot = static.osaBound.PLOT, file = 'rPlots/go-enrich-static_osaBound.png', width = 10, height = 10, dpi = 300)
goEnrich <- function(geneList, universe, name) {
#  go <- select(org.Dm.eg.db, keys = geneList$Geneid, columns = c('SYMBOL','GO','ENTREZID'), keytype = 'FLYBASE')
#  go.universe <- select(org.Dm.eg.db, keys = universe$Geneid, columns = c('SYMBOL','GO','ENTREZID'), keytype = 'FLYBASE')
ggo <- clusterProfiler::enrichGO(#gene = go$ENTREZID,
gene = geneList$Geneid,
universe = universe$Geneid,
OrgDb = org.Dm.eg.db,
keyType = 'FLYBASE',
ont = 'BP',
readable = T)
ggo.df <- data.frame(ggo)
#return(ggo.df)
simMatrix <- rrvgo::calculateSimMatrix(ggo.df$ID,
orgdb='org.Dm.eg.db',
ont='BP',
method='Rel', keytype = 'ENTREZID', semdata = goData)
scores <- setNames(-log10(ggo.df$qvalue), ggo.df$ID)
reducedTerms <- rrvgo::reduceSimMatrix(simMatrix, scores, threshold = 0.5, orgdb = org.Dm.eg.db)
reducedTerms %>%
dplyr::group_by(cluster, parentTerm) %>%
dplyr::mutate(neg_log10_qval = mean(score)) %>%
dplyr::ungroup() %>%
dplyr::select(parentTerm, neg_log10_qval) %>%
dplyr::group_by(parentTerm, neg_log10_qval) %>%
dplyr::summarise() %>%
dplyr::ungroup() %>%
dplyr::slice_max(neg_log10_qval, n = 15) %>%
dplyr::mutate(parentTerm = factor(parentTerm),
parentTerm = forcats::fct_reorder(parentTerm, neg_log10_qval)) %>%
ggplot(aes('', parentTerm, fill = neg_log10_qval)) +
geom_tile() +
scale_fill_viridis_b(name = 'avg\n-log10(qval)') +
ggtitle(name) +
theme(axis.text = element_text(size = 12),
axis.title = element_blank(),
axis.ticks.x = element_blank(),
legend.text = element_text(size = 12),
legend.title = element_text(size = 12))
}
closing.down.osaBound.PLOT <- goEnrich(closing.down.osaBound, down, 'closing.down.osaBound')
static.down.osaBound.PLOT <- goEnrich(static.down.osaBound, down, 'static.down.osaBound')
closing.down.osaBound.PLOT
static.down.osaBound.PLOT
#ggsave(plot = closing.osaBound.PLOT, file = 'rPlots/go-enrich-closing_osaBound.png', width = 10, height = 10, dpi = 300)
#ggsave(plot = static.osaBound.PLOT, file = 'rPlots/go-enrich-static_osaBound.png', width = 10, height = 10, dpi = 300)
goEnrich <- function(geneList, universe, name) {
#  go <- select(org.Dm.eg.db, keys = geneList$Geneid, columns = c('SYMBOL','GO','ENTREZID'), keytype = 'FLYBASE')
#  go.universe <- select(org.Dm.eg.db, keys = universe$Geneid, columns = c('SYMBOL','GO','ENTREZID'), keytype = 'FLYBASE')
ggo <- clusterProfiler::enrichGO(#gene = go$ENTREZID,
gene = geneList$Geneid,
universe = universe$Geneid,
OrgDb = org.Dm.eg.db,
keyType = 'FLYBASE',
ont = 'BP',
readable = T)
ggo.df <- data.frame(ggo)
return(ggo.df)
simMatrix <- rrvgo::calculateSimMatrix(ggo.df$ID,
orgdb='org.Dm.eg.db',
ont='BP',
method='Rel', keytype = 'ENTREZID', semdata = goData)
scores <- setNames(-log10(ggo.df$qvalue), ggo.df$ID)
reducedTerms <- rrvgo::reduceSimMatrix(simMatrix, scores, threshold = 0.5, orgdb = org.Dm.eg.db)
reducedTerms %>%
dplyr::group_by(cluster, parentTerm) %>%
dplyr::mutate(neg_log10_qval = mean(score)) %>%
dplyr::ungroup() %>%
dplyr::select(parentTerm, neg_log10_qval) %>%
dplyr::group_by(parentTerm, neg_log10_qval) %>%
dplyr::summarise() %>%
dplyr::ungroup() %>%
dplyr::slice_max(neg_log10_qval, n = 15) %>%
dplyr::mutate(parentTerm = factor(parentTerm),
parentTerm = forcats::fct_reorder(parentTerm, neg_log10_qval)) %>%
ggplot(aes('', parentTerm, fill = neg_log10_qval)) +
geom_tile() +
scale_fill_viridis_b(name = 'avg\n-log10(qval)') +
ggtitle(name) +
theme(axis.text = element_text(size = 12),
axis.title = element_blank(),
axis.ticks.x = element_blank(),
legend.text = element_text(size = 12),
legend.title = element_text(size = 12))
}
closing.down.osaBound.PLOT <- goEnrich(closing.down.osaBound, down, 'closing.down.osaBound')
static.down.osaBound.PLOT <- goEnrich(static.down.osaBound, down, 'static.down.osaBound')
closing.down.osaBound.PLOT
static.down.osaBound.PLOT
#ggsave(plot = closing.osaBound.PLOT, file = 'rPlots/go-enrich-closing_osaBound.png', width = 10, height = 10, dpi = 300)
#ggsave(plot = static.osaBound.PLOT, file = 'rPlots/go-enrich-static_osaBound.png', width = 10, height = 10, dpi = 300)
closing.osaBound.PLOT <- goEnrich(closing.osaBound, closing, 'closing.osaBound')
closing.osaBound.PLOT <- goEnrich(closing.osaBound, closing, 'closing.osaBound')
static.osaBound.PLOT <- goEnrich(static.osaBound, static, 'static.osaBound')
closing.osaBound.PLOT
static.osaBound.PLOT
fairePeaks.dm6 <- fairePeaks %>%
purrr::pmap_dfr(function(...) {
current <- tibble::tibble(...)
distances <- GenomicRanges::distance(GRanges(current), dm6.genes)
df <- data.frame(Geneid = dm6.genes$gene_id, distances = distances)
nearbyGenes <- dplyr::slice_min(df, distances, n = 1)
out <- current %>%
dplyr::mutate(nearbyGenes = list(nearbyGenes))
return(out)
}) %>%
tidyr::unnest(nearbyGenes) %>%
dplyr::left_join(., wing.rnaseq, by = 'Geneid') %>% # join the rna seq data by Geneid
# average transcription at 3LW and 24h APF then categorize gene by 'up', 'down', or 'static'
dplyr::mutate(L3_mean = rowMeans(.[,c('L3_rep1', 'L3_rep2')]),
h24_mean = rowMeans(.[,c('X24h_rep1', 'X24h_rep2')]),
l3v24 = log2(L3_mean / h24_mean),
cat = dplyr::case_when(l3v24 >= 1 ~ 'down',
l3v24 <= -1 ~ 'up',
T ~ 'static'))
closing.down.osaBound.PLOT <- goEnrich(closing.down.osaBound, down, 'closing.down.osaBound')
static.down.osaBound.PLOT <- goEnrich(static.down.osaBound, down, 'static.down.osaBound')
closing.down.osaBound.PLOT
static.down.osaBound.PLOT
#ggsave(plot = closing.osaBound.PLOT, file = 'rPlots/go-enrich-closing_osaBound.png', width = 10, height = 10, dpi = 300)
#ggsave(plot = static.osaBound.PLOT, file = 'rPlots/go-enrich-static_osaBound.png', width = 10, height = 10, dpi = 300)
closing.osaBound.PLOT <- goEnrich(closing.osaBound, closing, 'closing.osaBound')
closing.osaBound.PLOT <- goEnrich(closing.osaBound, closing, 'closing.osaBound')
static.osaBound.PLOT <- goEnrich(static.osaBound, static, 'static.osaBound')
closing.osaBound.PLOT
static.osaBound.PLOT
closing.osaBound.PLOT <- goEnrich(closing.osaBound, osaBound, 'closing.osaBound')
closing.osaBound.PLOT <- goEnrich(closing.osaBound, osaBound, 'closing.osaBound')
static.osaBound.PLOT <- goEnrich(static.osaBound, osaBound, 'static.osaBound')
closing.osaBound.PLOT
static.osaBound.PLOT
osaBound.entrez <- select(org.Dm.eg.db, keys = osaBound$Geneid, columns = c('SYMBOL','GO','ENTREZID'), keytype = 'FLYBASE')
osaBound.entrez
unique(osaBound.entrez$ENTREZID)
osaBound.entrez <- select(org.Dm.eg.db, keys = osaBound$Geneid, columns = c('SYMBOL','GO','ENTREZID'), keytype = 'FLYBASE') %>% dplyr::distinct(ENTREZID)
osaBound.entrez
unique(osaBound.entrez)
osaBound.entrez <- select(org.Dm.eg.db, keys = osaBound$Geneid, columns = c('SYMBOL','GO','ENTREZID'), keytype = 'FLYBASE') #%>% dplyr::distinct(ENTREZID)
osaBound.entrez
osaBound.entrez <- select(org.Dm.eg.db, keys = osaBound$Geneid, columns = c('SYMBOL','GO','ENTREZID'), keytype = 'FLYBASE') %>% dplyr::distinct(ENTREZID)
GOSemSim::mgeneSim(osaBound.entrez, semData = goData)
osaBound.entrez
GOSemSim::mgeneSim(osaBound.entrez$ENTREZID, semData = goData)
closing.osaBound.semsim <- GOSemSim::mgeneSim(closing.osaBound$Geneid, semData = goData, verbose = F, keytype = 'FLYBASE')
goData <- GOSemSim::godata(org.Dm.eg.db, ont='BP', keytype = 'FLYBASE')
closing.osaBound.semsim <- GOSemSim::mgeneSim(closing.osaBound$Geneid, semData = goData, verbose = F)
closing.osaBound.semsim
pheatmap::pheatmap(closing.osaBound.semsim)
pheatmap::pheatmap(closing.osaBound.semsim, kmeans_k = 10)
pheatmap::pheatmap(closing.osaBound.semsim)
png('rPlots/osa-bound-closing-semsim-hm.png', dpi = 300, width = 25, height = 20)
png('rPlots/osa-bound-closing-semsim-hm.png', dpi = 300, width = 25, height = 20)
png('rPlots/osa-bound-closing-semsim-hm.png', width = 25, height = 20)
pheatmap::pheatmap(closing.osaBound.semsim)
dev.off()
png('rPlots/osa-bound-closing-semsim-hm.png', res = 300, width = 25, height = 20, units = 'cm')
png('rPlots/osa-bound-closing-semsim-hm.png', res = 300, width = 25, height = 20, units = 'cm')
pheatmap::pheatmap(closing.osaBound.semsim)
dev.off()
png('rPlots/osa-bound-closing-semsim-hm.png', res = 300, width = 50, height = 40, units = 'cm')
pheatmap::pheatmap(closing.osaBound.semsim)
dev.off()
png('rPlots/osa-bound-closing-semsim-hm.png', res = 300, width = 100, height = 80, units = 'cm')
pheatmap::pheatmap(closing.osaBound.semsim)
dev.off()
pheatmap::pheatmap(closing.osaBound.semsim, kmeans_k = 10)
pheatmap::pheatmap(closing.osaBound.semsim, kmeans_k = 10, cluster_cols = T)
pheatmap::pheatmap(closing.osaBound.semsim, cluster_cols = T)
pheatmap::pheatmap(closing.osaBound.semsim, cluster_cols = T, cluster_rows = T)
pheatmap::pheatmap(closing.osaBound.semsim, cluster_cols = T, kmeans_k = 20)
#png('rPlots/osa-bound-closing-semsim-hm.png', res = 300, width = 100, height = 80, units = 'cm')
pm <- pheatmap::pheatmap(closing.osaBound.semsim, cluster_cols = T, kmeans_k = 20)
pm.custer <- cbind(closing.osaBound.semsim, cluster = cutree(pm$tree_row, k = 20))
pm.custer
#png('rPlots/osa-bound-closing-semsim-hm.png', res = 300, width = 100, height = 80, units = 'cm')
pm <- pheatmap::pheatmap(closing.osaBound.semsim)
pm.cluster <- cbind(closing.osaBound.semsim,
cluster = cutree(pm$tree_row, k = 20))
pm.cluster
head(pm.cluster)
#png('rPlots/osa-bound-closing-semsim-hm.png', res = 300, width = 100, height = 80, units = 'cm')
pm <- pheatmap::pheatmap(closing.osaBound.semsim, kmeans_k = 20)
pm$kmeans
pm$kmeans$cluster
pm$kmeans$cluster %>%
data.frame()
pm$kmeans$cluster %>%
data.frame() %>%
dplyr::rename(cluster = .)
pm$kmeans$cluster %>%
data.frame() %>%
dplyr::rename(cluster = '.')
pm$kmeans$cluster %>%
data.frame() %>%
dplyr::rename(cluster = '.') %>%
dplyr::arrange(cluster)
#dev.off()
pm
clusters <- pm$kmeans$cluster %>%
data.frame() %>%
dplyr::rename(cluster = '.') %>%
dplyr::arrange(cluster)
pm
pm
#png('rPlots/osa-bound-closing-semsim-hm.png', res = 300, width = 100, height = 80, units = 'cm')
pm <- pheatmap::pheatmap(closing.osaBound.semsim, kmeans_k = 20)
clusters
clusters %>% dplyr::filter(cluster == 3)
clusters %>% dplyr::filter(cluster == 18)
clusters %>% dplyr::filter(cluster == 20)
clusters %>% dplyr::filter(cluster == 20) %>% dplyr::distinct()
clusters %>% dplyr::filter(cluster == 20)
clusters %>% dplyr::filter(cluster == 20) %>%
tibble::rownames_to_column() %>% dplyr::distinct()
closing.osaBound.semsim %>% data.frame()
closing.osaBound.semsim %>% data.frame() %>% tidyr::pivot_longer()
closing.osaBound.semsim %>% data.frame() %>% tidyr::pivot_longer(.)
closing.osaBound.semsim %>% data.frame() %>% tibble::rowid_to_column() %>% tidyr::pivot_longer(!rowname)
closing.osaBound.semsim %>% data.frame() %>% tibble::rowid_to_column() #%>% tidyr::pivot_longer(!rowname)
closing.osaBound.semsim %>% data.frame() #%>% tibble::rowid_to_column() #%>% tidyr::pivot_longer(!rowname)
closing.osaBound.semsim %>% data.frame() %>% tibble::rownames_to_column() #%>% tidyr::pivot_longer(!rowname)
closing.osaBound.semsim %>% data.frame() %>% tibble::rownames_to_column() %>% tidyr::pivot_longer(!rowname)
closing.osaBound.semsim %>% data.frame() %>% tibble::rownames_to_column() %>% tidyr::pivot_longer(!rowname, names_to = 'colname')
test <- closing.osaBound.semsim %>% data.frame() %>% tibble::rownames_to_column() %>% tidyr::pivot_longer(!rowname, names_to = 'colname')
select(org.Dm.eg.db, keys = test$rowname, columns = 'SYMBOL', keytpe = 'FLYBASE')
select(org.Dm.eg.db, keys = test$rowname, columns = 'SYMBOL', keytype = 'FLYBASE')
test.symbol <- select(org.Dm.eg.db, keys = test$rowname, columns = 'SYMBOL', keytype = 'FLYBASE') %>% dplyr::rename(rowname = FLYBASE)
test.symbol
dplyr::left_join(test, test.symbol, by = 'rowname')
test
test.symbol <- select(org.Dm.eg.db, keys = test$rowname, columns = 'SYMBOL', keytype = 'FLYBASE')
test.sybmol
test.symbol
test %>%
dplyr::mutate(rowSymbol = test.symbol[.$rowname == test.symbol$FLYBASE,]$SYMBOL,
colSymbol = test.symbol[.$colname == test.symbol$FLYBASE,]$SYMBOL)
test %>%
dplyr::group_by(rowname) %>%
dplyr::mutate(rowSymbol = test.symbol[.$rowname == test.symbol$FLYBASE,]$SYMBOL,
colSymbol = test.symbol[.$colname == test.symbol$FLYBASE,]$SYMBOL)
test %>%
dplyr::rowwise() %>%
dplyr::mutate(rowSymbol = test.symbol[.$rowname == test.symbol$FLYBASE,]$SYMBOL,
colSymbol = test.symbol[.$colname == test.symbol$FLYBASE,]$SYMBOL)
test %>%
dplyr::group_by(rowname, colname) %>%
dplyr::mutate(rowSymbol = test.symbol[.$rowname == test.symbol$FLYBASE,]$SYMBOL,
colSymbol = test.symbol[.$colname == test.symbol$FLYBASE,]$SYMBOL)
test
test.symbol['FBgn0002931' == test.symbol$FLYBASE,]$SYMBOL
test.symbol
test.symbol <- select(org.Dm.eg.db, keys = test$rowname, columns = 'SYMBOL', keytype = 'FLYBASE') %>% dplyr::distinct()
test.symbol
test %>%
dplyr::group_by(rowname, colname) %>%
dplyr::mutate(rowSymbol = test.symbol[.$rowname == test.symbol$FLYBASE,]$SYMBOL,
colSymbol = test.symbol[.$colname == test.symbol$FLYBASE,]$SYMBOL)
test %>%
dplyr::rowwise() %>%
dplyr::mutate(rowSymbol = test.symbol[.$rowname == test.symbol$FLYBASE,]$SYMBOL,
colSymbol = test.symbol[.$colname == test.symbol$FLYBASE,]$SYMBOL)
test.symbol['FBgn0002931' == test.symbol$FLYBASE,]$SYMBOL
test %>%
#  dplyr::rowwise() %>%
dplyr::mutate(rowSymbol = test.symbol[.$rowname == test.symbol$FLYBASE,]$SYMBOL,
colSymbol = test.symbol[.$colname == test.symbol$FLYBASE,]$SYMBOL)
test %>%
dplyr::rowwise() %>%
dplyr::mutate(rowSymbol = test.symbol[.$rowname == test.symbol$FLYBASE,]$SYMBOL,
colSymbol = test.symbol[.$colname == test.symbol$FLYBASE,]$SYMBOL)
test %>%
dplyr::rowwise() %>%
dplyr::mutate(rowSymbol = test.symbol[rowname == test.symbol$FLYBASE,]$SYMBOL,
colSymbol = test.symbol[colname == test.symbol$FLYBASE,]$SYMBOL)
test %>%
dplyr::rowwise() %>%
dplyr::mutate(rowSymbol = test.symbol[rowname == test.symbol$FLYBASE,]$SYMBOL,
colSymbol = test.symbol[colname == test.symbol$FLYBASE,]$SYMBOL) %>%
tidyHeatmap::heatmap()
test
test %>%
dplyr::rowwise() %>%
dplyr::mutate(rowSymbol = test.symbol[rowname == test.symbol$FLYBASE,]$SYMBOL,
colSymbol = test.symbol[colname == test.symbol$FLYBASE,]$SYMBOL) %>%
tidyHeatmap::heatmap(rowSymbol, colSymbol, value)
