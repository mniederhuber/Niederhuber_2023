meme_db_on <- meme_db %>%
dplyr::filter(fbgn.validated %in% ON.genes.validated$Validated)
options(meme_db = universalmotif::to_list(meme_db_on, extrainfo = F))
###
# colors
###
viridis.hex <- c("#440154","#3b528b","#21918c","#5ec962","#5ec962","#fde725")
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cbPalette.4 <- c("#D81B60","#1E88E5","#FFC107","#004D40")
cbPalette.ibm <- c('#332288','#117733','#44AA99','#88CCEE','#DDCC77','#CC6677','#AA4499','#882255')
###
# peak subsets
###
osaPeaks <- peaks %>%
dplyr::filter(osa.cnr & !yw.cnr & assay == 'cnr') %>%
GRanges() %>%
resize(width = 1, fix = "center")
#TODO - this is maybe a bad control because its only 300 sites
osaUnbound <- peaks %>%
dplyr::filter(yw.cnr & assay == 'cnr') %>%
GRanges() %>%
resize(width = 1, fix = "center")
#trying this...
background <- peaks %>%
dplyr::filter(assay == '1kb background') %>%
GRanges() %>%
resize(width = 1, fix = 'center')
closing.osaBound <- peaks %>%
dplyr::filter(assay == 'faire' & experiment == 'WT FAIRE Wing Timecourse' & faireCat.3LW_24h == 'closing' & osa.cnr & !yw.cnr) %>%
GRanges() %>%
resize(width = 1, fix = "center")
fairePeaks.wt <- peaks %>%
dplyr::filter(assay == 'faire' & experiment == 'WT FAIRE Wing Timecourse') %>%
GRanges() %>%
resize(width = 1, fix = "center")
#redundant... but used in a couple chunks for motif analysis
fairePeaks <- peaks %>%
dplyr::filter(assay == 'faire'  & experiment == 'WT FAIRE Wing Timecourse')
#DONE - remove the peakCat ? since now using log2fold change for these categories...
fairePeaks.deg <- peaks %>%
dplyr::filter(assay == 'faire' & experiment == 'osaGFP deGrad Pupal Wing FAIRE') %>%
#  dplyr::mutate(deg.peakCat = dplyr::case_when(osaGFP.deGrad & !osaGFP.control ~ 'osa ectopic',
#                                               !osaGFP.deGrad & osaGFP.control ~ 'osa dependent',
#                                               osaGFP.deGrad & osaGFP.control ~ 'osa independent',
#                                               T ~ as.character(NA))) %>%  # NA here would be peaks that aren't reproducible or of good quality
dplyr::filter(osaGFP.deGrad | osaGFP.control) %>% # want to only use peaks that are reproducible and of good quality
GRanges() %>%
resize(width = 1, fix = "center")
fairePeaks.osaDependent <- fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent') %>%
GRanges()
fairePeaks.osaIndependent <- fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Independent') %>%
GRanges()
fairePeaks.osaEctopic <- fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Ectopic') %>%
GRanges()
###
# load bws and matrices for heatmaps
###
#TODO - cleanup - move matrices?
bws <- get_bws(dplyr::bind_rows(cnr.ss, faire.wt.ssPool), 'id')
deg.bws <- get_bws(faire.ss %>% dplyr::filter(experiment == 'osaGFP deGrad FAIRE'), 'id')
#mats <- purrr::map(bws, ~{
#  normalizeToMatrix(., osaPeaks, value_column = 'score', keep = c(0.01, 0.99), extend = 2000)
#})
#names(mats) <- names(bws)
#TODO -- move to utils?
###
# functions
###
plot.frac <- function(x) {
lapply(unique(x$change), function(i) {
x %>%
dplyr::filter(change == i) %>%
ggplot(aes(fraction, change, fill = Osa.Bound)) +
geom_bar(stat = 'identity', width = 1) +
geom_text(aes(label = per), position = position_fill(vjust = 0.6),  size = 7, fontface = "bold") +
#geom_text(aes(label = per, position = position_stack(vjust = 0.5))) +
scale_fill_manual(values = c('grey80','#41f0ad'), name = 'Osa Bound') +
scale_y_discrete(position = 'right', ) +
xlab('Percent Bound by Osa') +
theme(legend.position = 'top',
legend.key.size = unit(1, 'cm'),
legend.text = element_text(size = 15),
legend.title = element_text(size = 20),
panel.background = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
#           axis.text.y = element_text(size = 12),
panel.grid = element_blank()) +
NULL
fn = paste0('rPlots/3E_',i,'.png')
ggsave(fn, width = 6, height = 1.5, units = 'in', dpi = 300 )
})
}
osaPeaks %>%
data.frame() %>%
dplyr::select(seqnames, start, end) %>%
write.table('osaPeaks.bed', quote = F, col.names = F, row.names = F, sep = '\t')
fairePeaks.osaDependent %>%
data.frame() %>%
dplyr::select(seqnames, start, end) %>%
write.table('osaDependent.bed', quote = F, col.names = F, row.names = F, sep = '\t')
fairePeaks.osaEctopic %>%
data.frame() %>%
dplyr::select(seqnames, start, end) %>%
write.table('osaEctopic.bed', quote = F, col.names = F, row.names = F, sep = '\t')
### for gviz
genetrack <- Gviz::GeneRegionTrack(range = dm6.TxDb, fill = 'grey80', showTitle = F, background.title = 'white')
peaks
peaks
peaks %>% tidyr::unnest(flank_distance)
library(magrittr)
library(ggplot2)
library(ggrepel)
library(GenomicRanges)
library(org.Dm.eg.db)
library(AnnotationDbi)
library(EnrichedHeatmap)
library(ComplexHeatmap)
library(GO.db)
library(patchwork)
source('utils.R')
source('~/NystLib/R/peakUtils.R') #TODO move/rewrite getPeakData from NystLib to utils.R
###
# load rData
###
load('rData/sheets.rda')
load('rData/peaks.rda')
#TODO move RNAseq data into BAP project
# TODO this is in progress - mixed across directories
load('rData/wing-rnaseq-GeTMM.RData')  # GeTMM normalized RNAseq
#loads 'wing.rnaseq'
#load('rData/wing-rnaseq-DDS.RData')  # loads dds.results
## TODO -- no id validation yet need to fix
#rna.dds <- dds.results %>%
#  dplyr::filter(baseMean_6h > 0) %>%
#  tibble::rownames_to_column(var = 'Geneid')
ON.genes <- wing.rnaseq %>%
dplyr::filter(mean >= 2) %>%
dplyr::select(Geneid)
ON.genes %>% write.table('on-rnaseq.txt', sep = '\n', row.names = F, col.names = F, quote = F)
#TODO clean this up - had to write out the on list and use the flybase id validator tool...
ON.genes.validated <- read.table('~/McKay/Wing-RNAseq/on-genes-IDvalidation.txt', header = T) %>%
dplyr::rename(Geneid = submitted_item,
Validated = validated_id,
Symbol = current_symbol)
#TODO move flyfactor database to BAP - code to download to repo?
## load in a flyfacotr fbgn validated .txt - generated with Flybase id validator
## there are 2 'FlyFactor' FBgn codes that are updated two more than 1 unique 'Validated' FBgns in `fbgn.validated`
# FBgn0051782 -- CG31782 in flyfactor - old annotation? no present in Flybase, maybe split into three differen pseudogene annos now
# FBgn0050420 -- is only Atf-2 in flyfactor db
fbgn.validated <- read.table('~/McKay/Motif_databases/FLY/fbgn_validated.txt', header = F, sep = '\t')
colnames(fbgn.validated) <- c('FlyFactor', 'Validated', 'Symbol')
fbgn.validated %<>%
dplyr::filter(FlyFactor != 'FBgn0051782') %>% #drop this FBgn, problematic update to multiple new FBgns of pseudogenes
dplyr::filter(Validated != 'FBgn0265182') # drop this Validated FBgn, which is an incorrectly updated from FBgn0050420
###
# assign global variables
###
dm6 <- BSgenome.Dmelanogaster.UCSC.dm6::BSgenome.Dmelanogaster.UCSC.dm6
dm3 <- BSgenome.Dmelanogaster.UCSC.dm3::BSgenome.Dmelanogaster.UCSC.dm3
dm6.TxDb <- TxDb.Dmelanogaster.UCSC.dm6.ensGene::TxDb.Dmelanogaster.UCSC.dm6.ensGene
dm6.promoters <- ChIPseeker::getPromoters(dm6.TxDb, upstream = 500, downstream = 100)
dm6.genes <- GenomicFeatures::genes(dm6.TxDb)
brD <- data.frame('seqnames' = 'chrX',
'start' = 1565708,
'end' = 1567401) %>%
GenomicRanges::GRanges()
shn <- data.frame('seqnames' = 'chr2R',
'start' = 11159086,
'end' = 11217394) %>%
GRanges()
sbb <- data.frame('seqnames' = 'chr2R',
'start' = 18278198,
'end' = 18357296) %>%
GRanges()
###
# meme db
###
#TODO - so clunky...
# loading in the fly factor database, drop out a couple of problematic fbgn
# then use the fbgn.validated lookup table for fly factor to update all the old ids to correct ids
# then filter on the on gene list -- which has to go through a similar process of id validation
# gross
meme_db <- universalmotif::read_meme('~/McKay/Motif_databases/FLY/fly_factor_survey.meme') %>%
universalmotif::to_df() %>%
dplyr::group_by(name) %>%
dplyr::filter(!grepl('FBgn0051782|FBgn0265182', name)) %>%  #drop this FBgn, problematic update to multiple new FBgns of pseudogenes
dplyr::mutate(basename = stringr::str_split_fixed(name, '_', n = 2)[[1]],
fbgn.validated = fbgn.validated[fbgn.validated$FlyFactor == basename,]$Validated)
meme_db_on <- meme_db %>%
dplyr::filter(fbgn.validated %in% ON.genes.validated$Validated)
options(meme_db = universalmotif::to_list(meme_db_on, extrainfo = F))
###
# colors
###
viridis.hex <- c("#440154","#3b528b","#21918c","#5ec962","#5ec962","#fde725")
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cbPalette.4 <- c("#D81B60","#1E88E5","#FFC107","#004D40")
cbPalette.ibm <- c('#332288','#117733','#44AA99','#88CCEE','#DDCC77','#CC6677','#AA4499','#882255')
###
# peak subsets
###
osaPeaks <- peaks %>%
dplyr::filter(osa.cnr & !yw.cnr & assay == 'cnr') %>%
GRanges() %>%
resize(width = 1, fix = "center")
#TODO - this is maybe a bad control because its only 300 sites
osaUnbound <- peaks %>%
dplyr::filter(yw.cnr & assay == 'cnr') %>%
GRanges() %>%
resize(width = 1, fix = "center")
#trying this...
background <- peaks %>%
dplyr::filter(assay == '1kb background') %>%
GRanges() %>%
resize(width = 1, fix = 'center')
closing.osaBound <- peaks %>%
dplyr::filter(assay == 'faire' & experiment == 'WT FAIRE Wing Timecourse' & faireCat.3LW_24h == 'closing' & osa.cnr & !yw.cnr) %>%
GRanges() %>%
resize(width = 1, fix = "center")
fairePeaks.wt <- peaks %>%
dplyr::filter(assay == 'faire' & experiment == 'WT FAIRE Wing Timecourse') %>%
GRanges() %>%
resize(width = 1, fix = "center")
#redundant... but used in a couple chunks for motif analysis
fairePeaks <- peaks %>%
dplyr::filter(assay == 'faire'  & experiment == 'WT FAIRE Wing Timecourse')
#DONE - remove the peakCat ? since now using log2fold change for these categories...
fairePeaks.deg <- peaks %>%
dplyr::filter(assay == 'faire' & experiment == 'osaGFP deGrad Pupal Wing FAIRE') %>%
#  dplyr::mutate(deg.peakCat = dplyr::case_when(osaGFP.deGrad & !osaGFP.control ~ 'osa ectopic',
#                                               !osaGFP.deGrad & osaGFP.control ~ 'osa dependent',
#                                               osaGFP.deGrad & osaGFP.control ~ 'osa independent',
#                                               T ~ as.character(NA))) %>%  # NA here would be peaks that aren't reproducible or of good quality
dplyr::filter(osaGFP.deGrad | osaGFP.control) %>% # want to only use peaks that are reproducible and of good quality
GRanges() %>%
resize(width = 1, fix = "center")
fairePeaks.osaDependent <- fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent') %>%
GRanges()
fairePeaks.osaIndependent <- fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Independent') %>%
GRanges()
fairePeaks.osaEctopic <- fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Ectopic') %>%
GRanges()
###
# load bws and matrices for heatmaps
###
#TODO - cleanup - move matrices?
bws <- get_bws(dplyr::bind_rows(cnr.ss, faire.wt.ssPool), 'id')
deg.bws <- get_bws(faire.ss %>% dplyr::filter(experiment == 'osaGFP deGrad FAIRE'), 'id')
#mats <- purrr::map(bws, ~{
#  normalizeToMatrix(., osaPeaks, value_column = 'score', keep = c(0.01, 0.99), extend = 2000)
#})
#names(mats) <- names(bws)
#TODO -- move to utils?
###
# functions
###
plot.frac <- function(x) {
lapply(unique(x$change), function(i) {
x %>%
dplyr::filter(change == i) %>%
ggplot(aes(fraction, change, fill = Osa.Bound)) +
geom_bar(stat = 'identity', width = 1) +
geom_text(aes(label = per), position = position_fill(vjust = 0.6),  size = 7, fontface = "bold") +
#geom_text(aes(label = per, position = position_stack(vjust = 0.5))) +
scale_fill_manual(values = c('grey80','#41f0ad'), name = 'Osa Bound') +
scale_y_discrete(position = 'right', ) +
xlab('Percent Bound by Osa') +
theme(legend.position = 'top',
legend.key.size = unit(1, 'cm'),
legend.text = element_text(size = 15),
legend.title = element_text(size = 20),
panel.background = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
#           axis.text.y = element_text(size = 12),
panel.grid = element_blank()) +
NULL
fn = paste0('rPlots/3E_',i,'.png')
ggsave(fn, width = 6, height = 1.5, units = 'in', dpi = 300 )
})
}
osaPeaks %>%
data.frame() %>%
dplyr::select(seqnames, start, end) %>%
write.table('osaPeaks.bed', quote = F, col.names = F, row.names = F, sep = '\t')
fairePeaks.osaDependent %>%
data.frame() %>%
dplyr::select(seqnames, start, end) %>%
write.table('osaDependent.bed', quote = F, col.names = F, row.names = F, sep = '\t')
fairePeaks.osaEctopic %>%
data.frame() %>%
dplyr::select(seqnames, start, end) %>%
write.table('osaEctopic.bed', quote = F, col.names = F, row.names = F, sep = '\t')
### for gviz
genetrack <- Gviz::GeneRegionTrack(range = dm6.TxDb, fill = 'grey80', showTitle = F, background.title = 'white')
peaks %>% tidyr::unnest(flank_distance)
library(magrittr)
library(ggplot2)
library(ggrepel)
library(GenomicRanges)
library(org.Dm.eg.db)
library(AnnotationDbi)
library(EnrichedHeatmap)
library(ComplexHeatmap)
library(GO.db)
library(patchwork)
source('utils.R')
source('~/NystLib/R/peakUtils.R') #TODO move/rewrite getPeakData from NystLib to utils.R
###
# load rData
###
load('rData/sheets.rda')
load('rData/peaks.rda')
#TODO move RNAseq data into BAP project
# TODO this is in progress - mixed across directories
load('rData/wing-rnaseq-GeTMM.RData')  # GeTMM normalized RNAseq
#loads 'wing.rnaseq'
#load('rData/wing-rnaseq-DDS.RData')  # loads dds.results
## TODO -- no id validation yet need to fix
#rna.dds <- dds.results %>%
#  dplyr::filter(baseMean_6h > 0) %>%
#  tibble::rownames_to_column(var = 'Geneid')
ON.genes <- wing.rnaseq %>%
dplyr::filter(mean >= 2) %>%
dplyr::select(Geneid)
ON.genes %>% write.table('on-rnaseq.txt', sep = '\n', row.names = F, col.names = F, quote = F)
#TODO clean this up - had to write out the on list and use the flybase id validator tool...
ON.genes.validated <- read.table('~/McKay/Wing-RNAseq/on-genes-IDvalidation.txt', header = T) %>%
dplyr::rename(Geneid = submitted_item,
Validated = validated_id,
Symbol = current_symbol)
#TODO move flyfactor database to BAP - code to download to repo?
## load in a flyfacotr fbgn validated .txt - generated with Flybase id validator
## there are 2 'FlyFactor' FBgn codes that are updated two more than 1 unique 'Validated' FBgns in `fbgn.validated`
# FBgn0051782 -- CG31782 in flyfactor - old annotation? no present in Flybase, maybe split into three differen pseudogene annos now
# FBgn0050420 -- is only Atf-2 in flyfactor db
fbgn.validated <- read.table('~/McKay/Motif_databases/FLY/fbgn_validated.txt', header = F, sep = '\t')
colnames(fbgn.validated) <- c('FlyFactor', 'Validated', 'Symbol')
fbgn.validated %<>%
dplyr::filter(FlyFactor != 'FBgn0051782') %>% #drop this FBgn, problematic update to multiple new FBgns of pseudogenes
dplyr::filter(Validated != 'FBgn0265182') # drop this Validated FBgn, which is an incorrectly updated from FBgn0050420
###
# assign global variables
###
dm6 <- BSgenome.Dmelanogaster.UCSC.dm6::BSgenome.Dmelanogaster.UCSC.dm6
dm3 <- BSgenome.Dmelanogaster.UCSC.dm3::BSgenome.Dmelanogaster.UCSC.dm3
dm6.TxDb <- TxDb.Dmelanogaster.UCSC.dm6.ensGene::TxDb.Dmelanogaster.UCSC.dm6.ensGene
dm6.promoters <- ChIPseeker::getPromoters(dm6.TxDb, upstream = 500, downstream = 100)
dm6.genes <- GenomicFeatures::genes(dm6.TxDb)
brD <- data.frame('seqnames' = 'chrX',
'start' = 1565708,
'end' = 1567401) %>%
GenomicRanges::GRanges()
shn <- data.frame('seqnames' = 'chr2R',
'start' = 11159086,
'end' = 11217394) %>%
GRanges()
sbb <- data.frame('seqnames' = 'chr2R',
'start' = 18278198,
'end' = 18357296) %>%
GRanges()
###
# meme db
###
#TODO - so clunky...
# loading in the fly factor database, drop out a couple of problematic fbgn
# then use the fbgn.validated lookup table for fly factor to update all the old ids to correct ids
# then filter on the on gene list -- which has to go through a similar process of id validation
# gross
meme_db <- universalmotif::read_meme('~/McKay/Motif_databases/FLY/fly_factor_survey.meme') %>%
universalmotif::to_df() %>%
dplyr::group_by(name) %>%
dplyr::filter(!grepl('FBgn0051782|FBgn0265182', name)) %>%  #drop this FBgn, problematic update to multiple new FBgns of pseudogenes
dplyr::mutate(basename = stringr::str_split_fixed(name, '_', n = 2)[[1]],
fbgn.validated = fbgn.validated[fbgn.validated$FlyFactor == basename,]$Validated)
meme_db_on <- meme_db %>%
dplyr::filter(fbgn.validated %in% ON.genes.validated$Validated)
options(meme_db = universalmotif::to_list(meme_db_on, extrainfo = F))
###
# colors
###
viridis.hex <- c("#440154","#3b528b","#21918c","#5ec962","#5ec962","#fde725")
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cbPalette.4 <- c("#D81B60","#1E88E5","#FFC107","#004D40")
cbPalette.ibm <- c('#332288','#117733','#44AA99','#88CCEE','#DDCC77','#CC6677','#AA4499','#882255')
###
# peak subsets
###
osaPeaks <- peaks %>%
dplyr::filter(osa.cnr & !yw.cnr & assay == 'cnr') %>%
GRanges() %>%
resize(width = 1, fix = "center")
#TODO - this is maybe a bad control because its only 300 sites
osaUnbound <- peaks %>%
dplyr::filter(yw.cnr & assay == 'cnr') %>%
GRanges() %>%
resize(width = 1, fix = "center")
#trying this...
background <- peaks %>%
dplyr::filter(assay == '1kb background') %>%
GRanges() %>%
resize(width = 1, fix = 'center')
closing.osaBound <- peaks %>%
dplyr::filter(assay == 'faire' & experiment == 'WT FAIRE Wing Timecourse' & faireCat.3LW_24h == 'closing' & osa.cnr & !yw.cnr) %>%
GRanges() %>%
resize(width = 1, fix = "center")
fairePeaks.wt <- peaks %>%
dplyr::filter(assay == 'faire' & experiment == 'WT FAIRE Wing Timecourse') %>%
GRanges() %>%
resize(width = 1, fix = "center")
#redundant... but used in a couple chunks for motif analysis
fairePeaks <- peaks %>%
dplyr::filter(assay == 'faire'  & experiment == 'WT FAIRE Wing Timecourse')
#DONE - remove the peakCat ? since now using log2fold change for these categories...
fairePeaks.deg <- peaks %>%
dplyr::filter(assay == 'faire' & experiment == 'osaGFP deGrad Pupal Wing FAIRE') %>%
#  dplyr::mutate(deg.peakCat = dplyr::case_when(osaGFP.deGrad & !osaGFP.control ~ 'osa ectopic',
#                                               !osaGFP.deGrad & osaGFP.control ~ 'osa dependent',
#                                               osaGFP.deGrad & osaGFP.control ~ 'osa independent',
#                                               T ~ as.character(NA))) %>%  # NA here would be peaks that aren't reproducible or of good quality
dplyr::filter(osaGFP.deGrad | osaGFP.control) %>% # want to only use peaks that are reproducible and of good quality
GRanges() %>%
resize(width = 1, fix = "center")
fairePeaks.osaDependent <- fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Dependent') %>%
GRanges()
fairePeaks.osaIndependent <- fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Independent') %>%
GRanges()
fairePeaks.osaEctopic <- fairePeaks.deg %>%
data.frame() %>%
dplyr::filter(faireCat.osaDeGrad == 'Osa Ectopic') %>%
GRanges()
###
# load bws and matrices for heatmaps
###
#TODO - cleanup - move matrices?
bws <- get_bws(dplyr::bind_rows(cnr.ss, faire.wt.ssPool), 'id')
deg.bws <- get_bws(faire.ss %>% dplyr::filter(experiment == 'osaGFP deGrad FAIRE'), 'id')
#mats <- purrr::map(bws, ~{
#  normalizeToMatrix(., osaPeaks, value_column = 'score', keep = c(0.01, 0.99), extend = 2000)
#})
#names(mats) <- names(bws)
#TODO -- move to utils?
###
# functions
###
plot.frac <- function(x) {
lapply(unique(x$change), function(i) {
x %>%
dplyr::filter(change == i) %>%
ggplot(aes(fraction, change, fill = Osa.Bound)) +
geom_bar(stat = 'identity', width = 1) +
geom_text(aes(label = per), position = position_fill(vjust = 0.6),  size = 7, fontface = "bold") +
#geom_text(aes(label = per, position = position_stack(vjust = 0.5))) +
scale_fill_manual(values = c('grey80','#41f0ad'), name = 'Osa Bound') +
scale_y_discrete(position = 'right', ) +
xlab('Percent Bound by Osa') +
theme(legend.position = 'top',
legend.key.size = unit(1, 'cm'),
legend.text = element_text(size = 15),
legend.title = element_text(size = 20),
panel.background = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
#           axis.text.y = element_text(size = 12),
panel.grid = element_blank()) +
NULL
fn = paste0('rPlots/3E_',i,'.png')
ggsave(fn, width = 6, height = 1.5, units = 'in', dpi = 300 )
})
}
osaPeaks %>%
data.frame() %>%
dplyr::select(seqnames, start, end) %>%
write.table('osaPeaks.bed', quote = F, col.names = F, row.names = F, sep = '\t')
fairePeaks.osaDependent %>%
data.frame() %>%
dplyr::select(seqnames, start, end) %>%
write.table('osaDependent.bed', quote = F, col.names = F, row.names = F, sep = '\t')
fairePeaks.osaEctopic %>%
data.frame() %>%
dplyr::select(seqnames, start, end) %>%
write.table('osaEctopic.bed', quote = F, col.names = F, row.names = F, sep = '\t')
### for gviz
genetrack <- Gviz::GeneRegionTrack(range = dm6.TxDb, fill = 'grey80', showTitle = F, background.title = 'white')
peaks %>% tidyr::unnest(flank_distance)
peaks %>% tidyr::unnest(flank_distance)
peaks %>% tidyr::unnest(flank_distance) %>%
dplyr::filter(flank_distance != 0)
library(ChIPseeker)
peaks %>% tidyr::unnest(flank_distance)
BiocManager::install("ChIPseeker")
BiocManager::install("ChIPseeker", force = T)
