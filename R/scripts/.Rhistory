readr::read_tsv('../Peaks/osaGFP_deGrad_control_faire-Rep1_dm6_trim_q5_sorted_dupsRemoved_peaks.narrowPeak', col_names = F)
readr::read_tsv('../Peaks/osaGFP_deGrad_control_faire-Rep1_dm6_trim_q5_sorted_dupsRemoved_peaks.narrowPeak', col_names = F) %>%
setNames(., c("chr", "start", "end", "id", "score", "strand", "fold-change", "pValue", "qValue", "summitPos"))
library(magrittr)
readr::read_tsv('../Peaks/osaGFP_deGrad_control_faire-Rep1_dm6_trim_q5_sorted_dupsRemoved_peaks.narrowPeak', col_names = F) %>%
setNames(., c("chr", "start", "end", "id", "score", "strand", "fold-change", "pValue", "qValue", "summitPos"))
readr::read_tsv('../Peaks/osaGFP_deGrad_control_faire-Rep1_dm6_trim_q5_sorted_dupsRemoved_peaks.narrowPeak', col_names = F) %>%
setNames(., c("chr", "start", "end", "id", "score", "strand", "fold-change", "pValue", "qValue", "summitPos")) %>%
GenomicRanges::granges()
readr::read_tsv('../Peaks/osaGFP_deGrad_control_faire-Rep1_dm6_trim_q5_sorted_dupsRemoved_peaks.narrowPeak', col_names = F) %>%
setNames(., c("chr", "start", "end", "id", "score", "strand", "fold-change", "pValue", "qValue", "summitPos")) %>%
GenomicRanges::GRanges()
peaks <- read.csv('../sheets/wt-FAIRE-sampleSheet.tsv')
peaks <- read.csv('../sheets/wt-FAIRE-sampleSheet.tsv', sep = '\t')
split(peaks$peaks)
split(peaks, by = 'sample')
split(peaks[[sample]])
split(peaks,peaks[[sample]])
split(peaks,peaks[['sample']])
load("~/McKay/BAP_Project/R/rData/sheets.rda")
faire.ss
cnr.ss
faire.osaDeGrad.ss
lapply(split(cnr.ss, cnr.ss[['id']]), function(x) {
peak <- readr::read_tsv(x[['peaks']])
})
lapply(split(cnr.ss, cnr.ss[['id']]), function(x) {
return(x)
peak <- readr::read_tsv(x[['peaks']])
})
lapply(split(cnr.ss, cnr.ss[['id']]), function(x) {
return(x[['peaks']])
peak <- readr::read_tsv(x[['peaks']])
})
lapply(split(cnr.ss, cnr.ss[['id']]), function(x) {
return(x[[peaks]])
peak <- readr::read_tsv(x[['peaks']])
})
cnr.ss
return(x[['peaks_allFrags']])
lapply(split(cnr.ss, cnr.ss[['id']]), function(x) {
return(x[['peaks_allFrags']])
peak <- readr::read_tsv(x[['peaks']])
})
cnr.ss
lapply(split(cnr.ss, cnr.ss[['id']]), function(x) {
return(x[['peak_allFrags']])
peak <- readr::read_tsv(x[['peaks']])
})
lapply(split(cnr.ss, cnr.ss[['id']]), function(x) {
#  return(x[['peak_allFrags']])
peak <- readr::read_tsv(x[['peak_allFrags']])
})
lapply(split(cnr.ss, cnr.ss[['id']]), function(x) {
#  return(x[['peak_allFrags']])
peak <- readr::read_tsv(paste('../',x[['peak_allFrags']]))
})
lapply(split(cnr.ss, cnr.ss[['id']]), function(x) {
#  return(x[['peak_allFrags']])
peak <- readr::read_tsv(paste0('../',x[['peak_allFrags']]))
})
lapply(split(cnr.ss, cnr.ss[['id']]), function(x) {
#  return(x[['peak_allFrags']])
peaks <- readr::read_tsv(paste0('../',x[['peak_allFrags']]))
for (name in names(x)){
# add all metadata associated with each dataset to each peakset
peaks@elementMetadata[name] <- unlist(x[name])
}
})
lapply(split(cnr.ss, cnr.ss[['id']]), function(x) {
#  return(x[['peak_allFrags']])
peaks <- readr::read_tsv(paste0('../',x[['peak_allFrags']]),col_names = F)
for (name in names(x)){
# add all metadata associated with each dataset to each peakset
peaks@elementMetadata[name] <- unlist(x[name])
}
})
lapply(split(cnr.ss, cnr.ss[['id']]), function(x) {
#  return(x[['peak_allFrags']])
peaks <- readr::read_tsv(paste0('../',x[['peak_allFrags']]),col_names = F)  %>%
setNames(., c("chr", "start", "end", "id", "score", "strand", "fold-change", "pValue", "qValue", "summitPos")) %>%
GenomicRanges::GRanges()
for (name in names(x)){
# add all metadata associated with each dataset to each peakset
peaks@elementMetadata[name] <- unlist(x[name])
}
})
lapply(split(cnr.ss, cnr.ss[['id']]), function(x) {
#  return(x[['peak_allFrags']])
peaks <- readr::read_tsv(paste0('../',x[['peak_allFrags']]),col_names = F)  %>%
setNames(., c("chr", "start", "end", "id", "score", "strand", "fold-change", "pValue", "qValue", "summitPos")) %>%
GenomicRanges::GRanges()
for (name in names(x)){
# add all metadata associated with each dataset to each peakset
peaks@elementMetadata[name] <- unlist(x[name])
}
return(peaks)
}) %>%
GenomicRanges::GRangesList(.)
test <- lapply(split(cnr.ss, cnr.ss[['id']]), function(x) {
#  return(x[['peak_allFrags']])
peaks <- readr::read_tsv(paste0('../',x[['peak_allFrags']]),col_names = F)  %>%
setNames(., c("chr", "start", "end", "id", "score", "strand", "fold-change", "pValue", "qValue", "summitPos")) %>%
GenomicRanges::GRanges()
for (name in names(x)){
# add all metadata associated with each dataset to each peakset
peaks@elementMetadata[name] <- unlist(x[name])
}
return(peaks)
}) %>%
GenomicRanges::GRangesList(.)
test %>%
unlist() %>%
data.frame()
read.csv('../sheets/wt-FAIRE-sampleSheet.tsv', sep = '\t')
sheet <- read.csv('../sheets/wt-FAIRE-sampleSheet.tsv', sep = '\t')
sheet
sheet[['peaks']]
sheet['peaks']
sheet[['peaks']]
library(magrittr)
library(ggplot)
library(ggplot2)
readr::read_tsv('../Peaks/wt_18h-Rep1_dm6_trim_q5_sorted_dupsRemoved_peaks.narrowPeak')
readr::read_tsv('../Peaks/wt_18h-Rep1_dm6_trim_q5_sorted_dupsRemoved_peaks.narrowPeak', col_names = F)
source('peakUtils.R')
sheet
allPeaks <- getPeakData(sheet, by = 'baseName', narrowPeak_colname = 'peaks')
library(GenomicRanges)
allPeaks <- getPeakData(sheet, by = 'baseName', narrowPeak_colname = 'peaks')
library(magrittr)
library(ggplot2)
library(GenomicRanges)
source('peakUtils.R')
sheet <- read.csv('sheets/wt-FAIRE-sampleSheet.tsv', sep = '\t')
library(magrittr)
library(ggplot2)
library(GenomicRanges)
source('scripts/peakUtils.R')
sheet <- read.csv('sheets/wt-FAIRE-sampleSheet.tsv', sep = '\t')
sheet[['peaks']]
sheet['peaks']
readr::read_tsv('../Peaks/wt_18h-Rep1_dm6_trim_q5_sorted_dupsRemoved_peaks.narrowPeak', col_names = F)
readr::read_tsv('Peaks/wt_18h-Rep1_dm6_trim_q5_sorted_dupsRemoved_peaks.narrowPeak', col_names = F)
allPeaks <- getPeakData(sheet, by = 'baseName', narrowPeak_colname = 'peaks')
allPeaks
unique(allPeaks$baseName)
allPeaks
allPeaks %>%
dplyr::group_by(base_name) %>%
dplyr::tally()
allPeaks %>%
dplyr::group_by(baseName) %>%
dplyr::tally()
allPeaks %>%
dplyr::group_by(baseName) %>%
dplyr::summarise(mean = mean(width))
allPeaks %>%
dplyr::group_by(baseName) %>%
dplyr::summarise(mean = mean(width)) %>%
ggplot(aes(baseName, mean)) +
geom_point()
allPeaks %>%
dplyr::group_by(baseName) %>%
dplyr::summarise(mean = mean(width)) %>%
ggplot(aes(baseName, mean)) +
geom_bar()
allPeaks %>%
dplyr::group_by(baseName) %>%
dplyr::summarise(mean = mean(width)) %>%
ggplot(aes(baseName, mean)) +
geom_bar(stat = 'identity')
allPeaks
library(magrittr)
library(ggplot2)
library(ggtext)
#library(ggrepel)
library(GenomicRanges)
library(org.Dm.eg.db)
library(AnnotationDbi)
library(EnrichedHeatmap)
library(ComplexHeatmap)
#library(GO.db)
#library(patchwork)
source('scripts/utils.R')
source('scripts/peakUtils.R') #TODO move/rewrite getPeakData from NystLib to utils.R
## load data
load('rData/sheets.rda')
load('rData/peaks.rda')
load('rData/rnaiScreen.rda')
ON.genes.validated <- read.table('Data/on-genes-IDvalidation.txt', header = T) %>%
dplyr::rename(Geneid = submitted_item,
Validated = validated_id,
Symbol = current_symbol)
## there are 2 'FlyFactor' FBgn codes that are updated two more than 1 unique 'Validated' FBgns in `fbgn.validated`
# FBgn0051782 -- CG31782 in flyfactor - old annotation? no present in Flybase, maybe split into three differen pseudogene annos now
# FBgn0050420 -- is only Atf-2 in flyfactor db
fbgn.validated <- read.table('Data/fbgn_validated.txt', header = F, sep = '\t')
colnames(fbgn.validated) <- c('FlyFactor', 'Validated', 'Symbol')
fbgn.validated %<>%
dplyr::filter(FlyFactor != 'FBgn0051782') %>% #drop this FBgn, problematic update to multiple new FBgns of pseudogenes
dplyr::filter(Validated != 'FBgn0265182') # drop this Validated FBgn, which is an incorrectly updated from FBgn0050420
## global variables
###
# assign global variables
###
dm6 <- BSgenome.Dmelanogaster.UCSC.dm6::BSgenome.Dmelanogaster.UCSC.dm6
#dm3 <- BSgenome.Dmelanogaster.UCSC.dm3::BSgenome.Dmelanogaster.UCSC.dm3
dm6.TxDb <- TxDb.Dmelanogaster.UCSC.dm6.ensGene::TxDb.Dmelanogaster.UCSC.dm6.ensGene
faire.wt.ssPool
cnr.byID
osaDep.anno
allPeaks %>% GenomicRanges::GRanges()
GenomicRanges::GRanges(allPeaks)
allPeaks %>%
GenomicRanges::GRanges()
allPeaks %>%
GenomicRanges::GRanges() %>%
split(., mcols(.)$id)
list <- allPeaks %>%
GenomicRanges::GRanges() %>%
split(., mcols(.)$id)
list
list <- allPeaks %>%
GenomicRanges::GRanges() %>%
split(., mcols(.)$id)
list
list <- allPeaks %>%
GenomicRanges::GRanges() %>%
split(., mcols(.)$id) %>%
GenomicRanges::GRangesList()
list <- allPeaks %>%
GenomicRanges::GRanges() %>%
split(., mcols(.)$grp)
allPeaks
list <- allPeaks %>%
GenomicRanges::GRanges() %>%
split(., mcols(.)$baseName)
list$
allPeaks
allPeaks
list <- allPeaks %>%
GenomicRanges::GRanges() %>%
split(., mcols(.)$sample)
list %>%
unlist() %>%
reduce()
allPeaks %>% GenomicRanges::GRanges()
allPeaks %>% GenomicRanges::GRanges() %>% reduce()
union <- allPeaks %>% GenomicRanges::GRanges() %>% reduce()
union %>%
data.frame() %>%
dplyr::mutate(peakID = 1:nrow(.))
list <- allPeaks %>%
GenomicRanges::GRanges() %>%
split(., mcols(.)$sample)
union %>%
data.frame() %>%
dplyr::mutate(peakID = 1:nrow(.),
L3 = ifelse(GRanges(.) %over% list$wt_3LW, T, F))
